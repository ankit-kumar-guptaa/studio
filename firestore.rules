/**
 * @file Firebase Security Rules for Hiring Dekho Platform
 *
 * @core-philosophy This ruleset enforces a combination of user-ownership and
 * public-read/owner-write patterns. Most user data is secured behind
 * ownership checks, while certain collections like 'employers' and 'blogs' are
 * publicly readable but only writable by authorized users (in this prototype,
 * the creator of the content).
 *
 * @data-structure
 * - /jobSeekers/{jobSeekerId}: Job seeker profiles, accessible only to the
 *   owning user.
 * - /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}: Jobs saved by a specific
 *   job seeker.  Accessible only to the owning user.  This data is duplicated
 *   from the JobPost.
 * - /employers/{employerId}: Employer profiles. Publicly readable, but only
 *   creatable/updateable/deletable by the owning user.
 * - /employers/{employerId}/jobPosts/{jobPostId}: Job posts created by an
 *   employer.  Publicly readable, but only creatable/updateable/deletable by
 *   the owning employer.
 * - /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}:
 *   Job applications for a specific job post.
 * - /blogs/{blogId}: Blog posts. Publicly readable, but only
 *   creatable/updateable/deletable by the author.
 * - /companyReviews/{companyReviewId}: Company reviews. Publicly readable, but
 *   only creatable/updateable/deletable by the author.
 *
 * @key-security-decisions
 * - Listing of employer and blog posts is allowed for all users.
 * - Strict ownership is enforced for job seeker profiles and their associated
 *   data.
 * - Unauthenticated users have read-only access to employer and blog content.
 * - Data validation is relaxed in this prototyping phase.
 *
 * @denormalization-for-authorization N/A (ownership captured in path)
 * @structural-segregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId The user ID of the document owner.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for jobSeeker profiles.
     * @path /jobSeekers/{jobSeekerId}
     * @allow (create) User 'U7zlv5eKb5fSB96ZCSiH8RrEw6o1' can create their own profile.
     * @deny (create) User 'otherUserId' cannot create a profile for 'jobSeekerId'.
     * @allow (get) User 'U7zlv5eKb5fSB96ZCSiH8RrEw6o1' can get their own profile.
     * @deny (get) User 'otherUserId' cannot get the profile of 'jobSeekerId'.
     * @principle Enforces document ownership for writes.
     */
    match /jobSeekers/{jobSeekerId} {
      allow get: if isOwner(jobSeekerId);
      allow list: if false;
      allow create: if isOwner(jobSeekerId) && request.resource.data.id == jobSeekerId;
      allow update: if isExistingOwner(jobSeekerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(jobSeekerId);
    }

    /**
     * @description Rules for savedJobs subcollection.
     * @path /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}
     * @allow (create) User 'U7zlv5eKb5fSB96ZCSiH8RrEw6o1' can save a job.
     * @deny (create) User 'otherUserId' cannot save a job for 'jobSeekerId'.
     * @allow (get) User 'U7zlv5eKb5fSB96ZCSiH8RrEw6o1' can get their saved jobs.
     * @deny (get) User 'otherUserId' cannot get the saved jobs of 'jobSeekerId'.
     * @principle Restricts access to a user's own data tree.
     */
    match /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId} {
      allow get: if isOwner(jobSeekerId);
      allow list: if isOwner(jobSeekerId);
      allow create: if isOwner(jobSeekerId);
      allow update: if isExistingOwner(jobSeekerId);
      allow delete: if isExistingOwner(jobSeekerId);
    }

    /**
     * @description Rules for employers.
     * @path /employers/{employerId}
     * @allow (get) Any user can read employer profiles.
     * @deny (create) User 'unauthenticated' cannot create an employer profile.
     * @allow (create) User 'U7zlv5eKb5fSB96ZCSiH8RrEw6o1' can create their own employer profile.
     * @deny (create) User 'otherUserId' cannot create a profile for 'employerId'.
     * @principle Allows public read access with owner-only writes.
     */
    match /employers/{employerId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.auth.uid == employerId && request.resource.data.id == employerId;
      allow update: if isExistingOwner(employerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Rules for jobPosts subcollection.
     * @path /employers/{employerId}/jobPosts/{jobPostId}
     * @allow (get) Any user can read job posts.
     * @deny (create) User 'unauthenticated' cannot create a job post.
     * @allow (create) Employer 'employerId' can create a job post.
     * @deny (create) User 'otherUserId' cannot create a job post for 'employerId'.
     * @principle Allows public read access with owner-only writes.
     */
    match /employers/{employerId}/jobPosts/{jobPostId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/employers/$(employerId)).data.id == employerId;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/employers/$(employerId)).data.id == employerId && resource != null;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/employers/$(employerId)).data.id == employerId && resource != null;
    }

    /**
     * @description Rules for job applications.
     * @path /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}
     * @allow (create) Any authenticated user can apply for a job.
     * @deny (create) User 'unauthenticated' cannot apply for a job.
     * @principle  Only authenticated users can create new job applications.
     */
    match /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for blog posts.
     * @path /blogs/{blogId}
     * @allow (get) Any user can read blog posts.
     * @deny (create) User 'unauthenticated' cannot create a blog post.
     * @allow (create) User 'U7zlv5eKb5fSB96ZCSiH8RrEw6o1' can create a blog post.
     * @deny (create) User 'otherUserId' cannot create a blog post for 'blogId'.
     * @principle Allows public read access with owner-only writes.
     */
    match /blogs/{blogId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for company reviews.
     * @path /companyReviews/{companyReviewId}
     * @allow (get) Any user can read company reviews.
     * @deny (create) User 'unauthenticated' cannot create a company review.
     * @allow (create) User 'U7zlv5eKb5fSB96ZCSiH8RrEw6o1' can create a company review.
     * @deny (create) User 'otherUserId' cannot create a company review for 'companyReviewId'.
     * @principle Allows public read access with owner-only writes.
     */
    match /companyReviews/{companyReviewId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}