rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a job seeker to read and manage their own profile.
     * @path /jobSeekers/{jobSeekerId}
     * @allow (get, create, update, delete) if the user is the owner (jobSeekerId matches auth.uid).
     * @deny (get) if the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /jobSeekers/{jobSeekerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(jobSeekerId) {
        return isSignedIn() && request.auth.uid == jobSeekerId;
      }

      function isExistingOwner(jobSeekerId) {
        return isOwner(jobSeekerId) && resource.data != null;
      }

      allow get: if isOwner(jobSeekerId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == jobSeekerId;
      allow update: if isExistingOwner(jobSeekerId);
      allow delete: if isExistingOwner(jobSeekerId);
    }

    /**
     * @description Allows a job seeker to manage their saved jobs.
     * @path /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}
     * @allow (get, create, update, delete) if the user is the owner (jobSeekerId matches auth.uid).
     * @deny (get) if the user is not the owner.
     * @principle Restricts access to a user's own data tree.
     */
    match /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(jobSeekerId) {
        return isSignedIn() && request.auth.uid == jobSeekerId;
      }

      function isExistingOwner(jobSeekerId) {
        return isOwner(jobSeekerId) && resource.data != null;
      }

      allow get: if isOwner(jobSeekerId);
      allow list: if false;
      allow create: if isOwner(jobSeekerId);
      allow update: if isExistingOwner(jobSeekerId);
      allow delete: if isExistingOwner(jobSeekerId);
    }

       /**
        * @description Allows a job seeker to manage their job applications.
        * @path /jobSeekers/{jobSeekerId}/applications/{applicationId}
        * @allow (get, create, update, delete) if the user is the owner (jobSeekerId matches auth.uid).
        * @deny (get) if the user is not the owner.
        * @principle Restricts access to a user's own data tree.
        */
       match /jobSeekers/{jobSeekerId}/applications/{applicationId} {
         function isSignedIn() {
           return request.auth != null;
         }

         function isOwner(jobSeekerId) {
           return isSignedIn() && request.auth.uid == jobSeekerId;
         }

        function isExistingOwner(jobSeekerId) {
            return isOwner(jobSeekerId) && resource.data != null;
        }

         allow get: if isOwner(jobSeekerId);
         allow list: if false;
         allow create: if isOwner(jobSeekerId);
         allow update: if isExistingOwner(jobSeekerId);
         allow delete: if isExistingOwner(jobSeekerId);
       }

    /**
     * @description Allows an employer to read and manage their own profile.
     * @path /employers/{employerId}
     * @allow (get, create, update, delete) if the user is the owner (employerId matches auth.uid).
     * @deny (get) if the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{employerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
      }

       function isExistingOwner(employerId) {
            return isOwner(employerId) && resource.data != null;
        }

      allow get: if isOwner(employerId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == employerId;
      allow update: if isExistingOwner(employerId);
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Allows an employer to manage their job posts.
     * @path /employers/{employerId}/jobPosts/{jobPostId}
     * @allow (get, create, update, delete) if the user is the owner (employerId matches auth.uid).
     * @deny (get) if the user is not the owner.
     * @principle Restricts access to a user's own data tree.
     */
    match /employers/{employerId}/jobPosts/{jobPostId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
      }

        function isExistingOwner(employerId) {
            return isOwner(employerId) && resource.data != null;
        }

      allow get: if isOwner(employerId);
      allow list: if false;
      allow create: if isOwner(employerId);
      allow update: if isExistingOwner(employerId);
      allow delete: if isExistingOwner(employerId);
    }

        /**
         * @description Allows an employer to manage job applications for their job posts.
         * @path /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}
         * @allow (get, create, update, delete) if the user is the owner (employerId matches auth.uid).
         * @deny (get) if the user is not the owner.
         * @principle Restricts access to a user's own data tree.
         */
        match /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId} {
          function isSignedIn() {
            return request.auth != null;
          }

          function isOwner(employerId) {
            return isSignedIn() && request.auth.uid == employerId;
          }

            function isExistingOwner(employerId) {
                return isOwner(employerId) && resource.data != null;
            }

          allow get: if isOwner(employerId);
          allow list: if false;
          allow create: if isOwner(employerId);
          allow update: if isExistingOwner(employerId);
          allow delete: if isExistingOwner(employerId);
        }

    /**
     * @description Allows anyone to read job posts. Only the owner can create, update, or delete.
     * @path /jobPosts/{jobPostId}
     * @allow (get, list) to everyone.
     * @allow (create) if the request.auth.uid matches the employerId.
     * @allow (update, delete) if the user is the owner (employerId matches auth.uid).
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Allows public read access with owner-only writes.
     */
    match /jobPosts/{jobPostId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read blog posts.
     * @path /blogs/{blogId}
     * @allow (get, list) to everyone.
     * @deny (create, update, delete) to everyone.
     * @principle Public read, no writes allowed.
     */
    match /blogs/{blogId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read and create company reviews.
     * @path /companyReviews/{companyReviewId}
     * @allow (get, list, create) to everyone.
     * @deny (update, delete) to everyone.
     */
    match /companyReviews/{companyReviewId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}