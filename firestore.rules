/**
 * @description This ruleset enforces a strict user-ownership model for job seekers and employers,
 *              allowing them to manage their own profiles and related data. Public read access
 *              is granted for blogs and company reviews.
 * @dataStructure
 *  - /jobSeekers/{jobSeekerId}: Job seeker profiles, accessible only to the owner.
 *  - /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}: Jobs saved by a job seeker, accessible only to the owner.
 *  - /jobSeekers/{jobSeekerId}/applications/{applicationId}: Job applications made by a job seeker, accessible only to the owner.
 *  - /employers/{employerId}: Employer profiles, accessible only to the owner.
 *  - /employers/{employerId}/jobPosts/{jobPostId}: Job postings associated with an employer, accessible only to the owner.
 *  - /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}: Job applications for a specific job post.
 *  - /blogs/{blogId}: Publicly readable blog posts.
 *  - /companyReviews/{companyReviewId}: Publicly readable company reviews.
 * @keySecurityDecisions
 *  - User listing is disallowed for both job seekers and employers.
 *  - Ambiguous relationships default to strict owner-only access.
 *  - Public read access is allowed for blogs and company reviews.
 * @denormalizationForAuthorization N/A
 * @structuralSegregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to job seeker profiles.
     * @path /jobSeekers/{jobSeekerId}
     * @allow (create) User with UID 'test_user' can create their profile if jobSeekerId matches their UID.
     * @allow (get) User with UID 'test_user' can read their profile if jobSeekerId matches their UID.
     * @allow (update) User with UID 'test_user' can update their profile if jobSeekerId matches their UID.
     * @allow (delete) User with UID 'test_user' can delete their profile if jobSeekerId matches their UID.
     * @deny (create) User with UID 'other_user' cannot create a profile with jobSeekerId set to 'test_user'.
     * @deny (get) User with UID 'other_user' cannot read the profile of 'test_user'.
     * @principle Enforces document ownership for all operations.
     */
    match /jobSeekers/{jobSeekerId} {
      allow get: if isSignedIn() && isOwner(jobSeekerId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(jobSeekerId) && request.resource.data.id == jobSeekerId;
      allow update: if isSignedIn() && isExistingOwner(jobSeekerId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(jobSeekerId);
    }

    /**
     * @description Controls access to saved jobs for a specific job seeker.
     * @path /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}
     * @allow (create) User with UID 'test_user' can save a job if jobSeekerId matches their UID.
     * @allow (get) User with UID 'test_user' can read a saved job if jobSeekerId matches their UID.
     * @allow (list) User with UID 'test_user' can list their saved jobs if jobSeekerId matches their UID.
     * @allow (update) User with UID 'test_user' can update a saved job if jobSeekerId matches their UID.
     * @allow (delete) User with UID 'test_user' can delete a saved job if jobSeekerId matches their UID.
     * @deny (create) User with UID 'other_user' cannot save a job for jobSeekerId 'test_user'.
     * @deny (get) User with UID 'other_user' cannot read a saved job for jobSeekerId 'test_user'.
     * @principle Restricts access to a user's own data tree.
     */
    match /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId} {
      allow get: if isSignedIn() && isOwner(jobSeekerId);
      allow list: if isSignedIn() && isOwner(jobSeekerId);
      allow create: if isSignedIn() && isOwner(jobSeekerId);
      allow update: if isSignedIn() && isExistingOwner(jobSeekerId);
      allow delete: if isSignedIn() && isExistingOwner(jobSeekerId);
    }

    /**
     * @description Controls access to job applications for a specific job seeker.
     * @path /jobSeekers/{jobSeekerId}/applications/{applicationId}
     * @allow (create) User with UID 'test_user' can create an application if jobSeekerId matches their UID.
     * @allow (get) User with UID 'test_user' can read their application if jobSeekerId matches their UID.
     * @allow (list) User with UID 'test_user' can list their applications if jobSeekerId matches their UID.
     * @allow (update) User with UID 'test_user' can update their application if jobSeekerId matches their UID.
     * @allow (delete) User with UID 'test_user' can delete their application if jobSeekerId matches their UID.
     * @deny (create) User with UID 'other_user' cannot create an application for jobSeekerId 'test_user'.
     * @deny (get) User with UID 'other_user' cannot read an application for jobSeekerId 'test_user'.
     * @principle Restricts access to a user's own data tree.
     */
    match /jobSeekers/{jobSeekerId}/applications/{applicationId} {
      allow get: if isSignedIn() && isOwner(jobSeekerId);
      allow list: if isSignedIn() && isOwner(jobSeekerId);
      allow create: if isSignedIn() && isOwner(jobSeekerId);
      allow update: if isSignedIn() && isExistingOwner(jobSeekerId);
      allow delete: if isSignedIn() && isExistingOwner(jobSeekerId);
    }

    /**
     * @description Controls access to employer profiles.
     * @path /employers/{employerId}
     * @allow (create) User with UID 'test_employer' can create their profile if employerId matches their UID.
     * @allow (get) User with UID 'test_employer' can read their profile if employerId matches their UID.
     * @allow (update) User with UID 'test_employer' can update their profile if employerId matches their UID.
     * @allow (delete) User with UID 'test_employer' can delete their profile if employerId matches their UID.
     * @deny (create) User with UID 'other_user' cannot create a profile with employerId set to 'test_employer'.
     * @deny (get) User with UID 'other_user' cannot read the profile of 'test_employer'.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{employerId} {
      allow get: if isSignedIn() && isOwner(employerId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(employerId) && request.resource.data.id == employerId;
      allow update: if isSignedIn() && isExistingOwner(employerId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(employerId);
    }

    /**
     * @description Controls access to job posts associated with an employer.
     * @path /employers/{employerId}/jobPosts/{jobPostId}
     * @allow (create) User with UID 'test_employer' can create a job post if employerId matches their UID.
     * @allow (get) User with UID 'test_employer' can read a job post if employerId matches their UID.
     * @allow (list) User with UID 'test_employer' can list their job posts if employerId matches their UID.
     * @allow (update) User with UID 'test_employer' can update a job post if employerId matches their UID.
     * @allow (delete) User with UID 'test_employer' can delete a job post if employerId matches their UID.
     * @deny (create) User with UID 'other_user' cannot create a job post for employerId 'test_employer'.
     * @deny (get) User with UID 'other_user' cannot read a job post for employerId 'test_employer'.
     * @principle Restricts access to a user's own data tree.
     */
    match /employers/{employerId}/jobPosts/{jobPostId} {
      allow get: if isSignedIn() && isOwner(employerId);
      allow list: if isSignedIn() && isOwner(employerId);
      allow create: if isSignedIn() && isOwner(employerId);
      allow update: if isSignedIn() && isExistingOwner(employerId);
      allow delete: if isSignedIn() && isExistingOwner(employerId);
    }

    /**
     * @description Controls access to job applications for a specific job post of an employer.
     * @path /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}
     * @allow (create) User with UID 'test_employer' can create an application if employerId matches their UID.
     * @allow (get) User with UID 'test_employer' can read an application if employerId matches their UID.
     * @allow (list) User with UID 'test_employer' can list applications if employerId matches their UID.
     * @allow (update) User with UID 'test_employer' can update an application if employerId matches their UID.
     * @allow (delete) User with UID 'test_employer' can delete an application if employerId matches their UID.
     * @deny (create) User with UID 'other_user' cannot create an application for employerId 'test_employer'.
     * @deny (get) User with UID 'other_user' cannot read an application for employerId 'test_employer'.
     * @principle Restricts access to a user's own data tree.
     */
    match /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId} {
      allow get: if isSignedIn() && isOwner(employerId);
      allow list: if isSignedIn() && isOwner(employerId);
      allow create: if isSignedIn() && isOwner(employerId);
      allow update: if isSignedIn() && isExistingOwner(employerId);
      allow delete: if isSignedIn() && isExistingOwner(employerId);
    }

    /**
     * @description Controls access to blog posts.
     * @path /blogs/{blogId}
     * @allow (get) Any user can read a blog post.
     * @allow (list) Any user can list blog posts.
     * @deny (create) No one can create a blog post. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) No one can update a blog post. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) No one can delete a blog post. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (currently disabled due to missing ownership field).
     */
    match /blogs/{blogId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to company reviews.
     * @path /companyReviews/{companyReviewId}
     * @allow (get) Any user can read a company review.
     * @allow (list) Any user can list company reviews.
     * @deny (create) No one can create a company review. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) No one can update a company review. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) No one can delete a company review. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (currently disabled due to missing ownership field).
     */
    match /companyReviews/{companyReviewId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}