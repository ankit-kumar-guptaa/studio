/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model with public read access for certain collections.
 *
 * Data Structure:
 * - /jobSeekers/{jobSeekerId}: Stores job seeker profiles.
 * - /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}: Stores jobs saved by a job seeker.
 * - /jobSeekers/{jobSeekerId}/applications/{applicationId}: Stores job applications for a specific job seeker.
 * - /employers/{employerId}: Stores employer profiles.
 * - /employers/{employerId}/jobPosts/{jobPostId}: Stores job postings associated with an employer.
 * - /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}: Stores job applications for a specific job post.
 * - /jobPosts/{jobPostId}: Stores a public list of job posts.
 * - /blogs/{blogId}: Stores blog posts.
 * - /companyReviews/{companyReviewId}: Stores company reviews.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted for /jobPosts and /blogs collections.
 * - All other collections enforce strict user-ownership.
 * - Denormalization is used for authorization to avoid `get()` calls. The rules validate that the `jobSeekerId` field in the `/employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}` document matches the authenticated user's UID during creation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a job seeker to manage their own profile.
     * @path /jobSeekers/{jobSeekerId}
     * @allow (read, write) if the request is made by the job seeker with the matching ID.
     * @deny (read, write) if the request is made by a different user or an unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /jobSeekers/{jobSeekerId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(jobSeekerId);
      allow list: if false;
      allow create: if isOwner(jobSeekerId);
      allow update: if isOwner(jobSeekerId);
      allow delete: if isOwner(jobSeekerId) && resource != null;
    }

    /**
     * @description Allows a job seeker to manage their saved jobs.
     * @path /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}
     * @allow (read, write) if the request is made by the job seeker with the matching ID.
     * @deny (read, write) if the request is made by a different user or an unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId} {
        function isOwner(userId) {
          return request.auth != null && request.auth.uid == userId;
        }
        allow get: if isOwner(jobSeekerId);
        allow list: if isOwner(jobSeekerId);
        allow create: if isOwner(jobSeekerId);
        allow update: if isOwner(jobSeekerId);
        allow delete: if isOwner(jobSeekerId) && resource != null;
    }

    /**
     * @description Allows a job seeker to manage their job applications.
     * @path /jobSeekers/{jobSeekerId}/applications/{applicationId}
     * @allow (read, write) if the request is made by the job seeker with the matching ID.
     * @deny (read, write) if the request is made by a different user or an unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /jobSeekers/{jobSeekerId}/applications/{applicationId} {
        function isOwner(userId) {
          return request.auth != null && request.auth.uid == userId;
        }
        allow get: if isOwner(jobSeekerId);
        allow list: if isOwner(jobSeekerId);
        allow create: if isOwner(jobSeekerId);
        allow update: if isOwner(jobSeekerId);
        allow delete: if isOwner(jobSeekerId) && resource != null;
    }

    /**
     * @description Allows an employer to manage their own profile.
     * @path /employers/{employerId}
     * @allow (read, write) if the request is made by the employer with the matching ID.
     * @deny (read, write) if the request is made by a different user or an unauthenticated user.
     */
    match /employers/{employerId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(employerId);
      allow list: if false;
      allow create: if isOwner(employerId);
      allow update: if isOwner(employerId);
      allow delete: if isOwner(employerId) && resource != null;
    }

    /**
     * @description Allows an employer to manage their job posts.
     * @path /employers/{employerId}/jobPosts/{jobPostId}
     * @allow (read, write) if the request is made by the employer with the matching ID.
     * @deny (read, write) if the request is made by a different user or an unauthenticated user.
     */
    match /employers/{employerId}/jobPosts/{jobPostId} {
        function isOwner(userId) {
          return request.auth != null && request.auth.uid == userId;
        }
        allow get: if isOwner(employerId);
        allow list: if isOwner(employerId);
        allow create: if isOwner(employerId);
        allow update: if isOwner(employerId);
        allow delete: if isOwner(employerId) && resource != null;
    }

    /**
     * @description Allows a job seeker to create a job application for a specific job post.  Enforces that the 'jobSeekerId' field in the application matches the authenticated user's ID.
     * @path /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}
     * @allow (create) if the request is made by a job seeker and the 'jobSeekerId' field matches their UID.
     * @deny (create) if the 'jobSeekerId' field does not match the authenticated user's UID, or if the user is not authenticated.
     * @principle Validates relational integrity by ensuring the job application is linked to the correct job seeker.
     */
    match /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId} {
        function isOwner(jobSeekerId) {
          return request.auth != null && request.auth.uid == jobSeekerId;
        }
        function isValidApplication() {
          return request.resource.data.jobSeekerId == request.auth.uid;
        }

        allow get: if false;
        allow list: if false;
        allow create: if isOwner(request.resource.data.jobSeekerId) && isValidApplication();
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows anyone to read job posts. Only allows authorized users to create, update, or delete.
     * @path /jobPosts/{jobPostId}
     * @allow (get, list) Anyone can read or list job posts.
     * @allow (create, update, delete) Only the owner of the job post can modify it.
     * @deny (create, update, delete) if the request is made by an unauthorized user.
     * @principle Public read access with owner-only writes.
     */
    match /jobPosts/{jobPostId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read blog posts. Only allows authorized users to create, update, or delete.
     * @path /blogs/{blogId}
     * @allow (get, list) Anyone can read or list blog posts.
     * @allow (create, update, delete) Only the owner of the blog post can modify it.
     * @deny (create, update, delete) if the request is made by an unauthorized user.
     * @principle Public read access with owner-only writes.
     */
    match /blogs/{blogId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows access to company reviews.
     * @path /companyReviews/{companyReviewId}
     * @allow (read, write) if the request is made by the job seeker who created the review.
     * @deny (read, write) if the request is made by a different user or an unauthenticated user.
     */
    match /companyReviews/{companyReviewId} {
        function isOwner(jobSeekerId) {
          return request.auth != null && request.auth.uid == jobSeekerId;
        }
        allow get: if false;
        allow list: if false;
        allow create: if isOwner(request.resource.data.jobSeekerId);
        allow update: if false;
        allow delete: if false;
    }
  }
}