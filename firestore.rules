/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for job seekers and employers,
 *              allowing users to only access their own data. Job posts are publicly readable
 *              but only modifiable by their owners (employers). Blogs and CompanyReviews are also publicly readable.
 *
 * Data Structure:
 * - /jobSeekers/{jobSeekerId}: User profile data.
 * - /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}: Jobs saved by a job seeker.
 * - /jobSeekers/{jobSeekerId}/applications/{applicationId}: Applications submitted by job seeker
 * - /employers/{employerId}: Employer profile data.
 * - /employers/{employerId}/jobPosts/{jobPostId}: Job posts created by an employer.
 * - /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}: Applications submitted to the jobPost
 * - /jobPosts/{jobPostId}: Publicly readable collection of all job posts.
 * - /blogs/{blogId}: Publicly readable collection of blog posts.
 * - /companyReviews/{companyReviewId}: Publicly readable collection of company reviews.
 *
 * Key Security Decisions:
 * - User data (jobSeekers, employers) is strictly private and only accessible to the owning user.
 * - Job posts are publicly readable to maximize visibility but writes are restricted to the owning employer.
 * - Listing of user documents is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - Job posts include `employerId` to enforce ownership for modification.
 *
 * Structural Segregation:
 * - Job posts are stored in both a user subcollection (/employers/{employerId}/jobPosts/{jobPostId}) and a top-level collection (/jobPosts/{jobPostId}) to enable public listing while retaining ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure job seeker profiles. Only the owner can read and write their own profile.
     * @path /jobSeekers/{jobSeekerId}
     * @allow (get, update, delete) if the requesting user is the owner of the profile (jobSeekerId matches request.auth.uid).
     * @allow (create) if the requesting user's UID matches the jobSeekerId, ensuring they can only create their own profile.
     * @deny Any other user attempting to read, write, or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /jobSeekers/{jobSeekerId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(jobSeekerId);
      allow list: if false;
      allow create: if isOwner(jobSeekerId) && request.resource.data.id == jobSeekerId;
      allow update: if isExistingOwner(jobSeekerId) && resource.data.id == jobSeekerId;
      allow delete: if isExistingOwner(jobSeekerId);
    }

    /**
     * @description Secure saved jobs for a job seeker. Only the owner can read and write their own saved jobs.
     * @path /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}
     * @allow (get, update, delete) if the requesting user is the owner of the parent job seeker profile.
     * @allow (create) if the requesting user is the owner of the parent job seeker profile.
     * @deny Any other user attempting to read, write, or delete another user's saved jobs.
     * @principle Enforces document ownership for all operations within the user's data tree.
     */
    match /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(jobSeekerId);
      allow list: if isOwner(jobSeekerId);
      allow create: if isOwner(jobSeekerId);
      allow update: if isExistingOwner(jobSeekerId);
      allow delete: if isExistingOwner(jobSeekerId);
    }

     /**
      * @description Secure job applications for a job seeker. Only the owner can read and write their own applications.
      * @path /jobSeekers/{jobSeekerId}/applications/{applicationId}
      * @allow (get, update, delete) if the requesting user is the owner of the parent job seeker profile.
      * @allow (create) if the requesting user is the owner of the parent job seeker profile.
      * @deny Any other user attempting to read, write, or delete another user's applications.
      * @principle Enforces document ownership for all operations within the user's data tree.
      */
    match /jobSeekers/{jobSeekerId}/applications/{applicationId} {
       function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(jobSeekerId);
      allow list: if isOwner(jobSeekerId);
      allow create: if isOwner(jobSeekerId);
      allow update: if isExistingOwner(jobSeekerId);
      allow delete: if isExistingOwner(jobSeekerId);
    }

    /**
     * @description Secure employer profiles. Only the owner can read and write their own profile.
     * @path /employers/{employerId}
     * @allow (get, update, delete) if the requesting user is the owner of the profile (employerId matches request.auth.uid).
     * @allow (create) if the requesting user's UID matches the employerId, ensuring they can only create their own profile.
     * @deny Any other user attempting to read, write, or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{employerId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(employerId);
      allow list: if false;
      allow create: if isOwner(employerId) && request.resource.data.id == employerId;
      allow update: if isExistingOwner(employerId) && resource.data.id == employerId;
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Secure job posts created by an employer. Only the owner can read and write their own job posts.
     * @path /employers/{employerId}/jobPosts/{jobPostId}
     * @allow (get, update, delete) if the requesting user is the owner of the parent employer profile.
     * @allow (create) if the requesting user is the owner of the parent employer profile.
     * @deny Any other user attempting to read, write, or delete another user's job posts.
     * @principle Enforces document ownership for all operations within the user's data tree.
     */
    match /employers/{employerId}/jobPosts/{jobPostId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(employerId);
      allow list: if isOwner(employerId);
      allow create: if isOwner(employerId);
      allow update: if isExistingOwner(employerId);
      allow delete: if isExistingOwner(employerId);
    }

      /**
       * @description Secure job applications for a jobPost created by an employer. Only the owner can read and write their own applications.
       * @path /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}
       * @allow (get, update, delete) if the requesting user is the owner of the parent employer profile.
       * @allow (create) if the requesting user is the owner of the parent employer profile.
       * @deny Any other user attempting to read, write, or delete another user's applications.
       * @principle Enforces document ownership for all operations within the user's data tree.
       */
    match /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId} {
       function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(employerId);
      allow list: if isOwner(employerId);
      allow create: if isOwner(employerId);
      allow update: if isExistingOwner(employerId);
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Secure job posts for public reading, with owner-only writes.
     * @path /jobPosts/{jobPostId}
     * @allow (get, list) Public access is allowed for reading job posts.
     * @allow (create) The authorId field in the incoming data must match the authenticated user's UID.
     * @allow (update, delete) The requesting user must be the owner of the job post (authorId matches request.auth.uid) and the document must exist.
     * @deny Any create request where authorId does not match the authenticated user.
     * @deny Any update/delete request where the requesting user is not the owner.
     * @principle Public read access with restricted, owner-only writes.
     */
    match /jobPosts/{jobPostId} {
        function isOwner(employerId) {
            return request.auth != null && request.auth.uid == employerId;
        }
        function isExistingOwner(employerId) {
            return isOwner(employerId) && resource != null;
        }
        allow get: if true;
        allow list: if true;
        allow create: if request.resource.data.employerId == request.auth.uid;
        allow update: if isExistingOwner(resource.data.employerId);
        allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Allow public read access to blog posts.
     * @path /blogs/{blogId}
     * @allow (get, list) Public access is allowed for reading blog posts.
     * @deny All write operations are denied.
     * @principle Public read access.
     */
    match /blogs/{blogId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allow public read access to company reviews.
     * @path /companyReviews/{companyReviewId}
     * @allow (get, list) Public access is allowed for reading company reviews.
     * @deny All write operations are denied.
     * @principle Public read access.
     */
    match /companyReviews/{companyReviewId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}