/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for job seekers and employers,
 *              allowing them to manage their profiles and associated data. Job posts and blogs are
 *              publicly readable, but only authorized users can create, update, or delete them.
 *              Company reviews can be created by any signed-in user.
 *
 * Data Structure:
 * - /jobSeekers/{jobSeekerId}: Job seeker profiles, accessible only by the owner.
 * - /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}: Jobs saved by a job seeker, accessible only by the owner.
 * - /employers/{employerId}: Employer profiles, accessible only by the owner.
 * - /employers/{employerId}/jobPosts/{jobPostId}: Job posts created by an employer, accessible only by the owner.
 * - /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}: Job applications for a specific job post, accessible only by the owner (employer).
 * - /jobPosts/{jobPostId}: Job posts created by an employer, publicly readable, writeable only by the owner.
 * - /blogs/{blogId}: Blog posts, publicly readable, writeable only by an admin.
 * - /companyReviews/{companyReviewId}: Company reviews, writable by any signed-in user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to the jobPosts and blogs collections.
 *
 * Denormalization for Authorization:
 * - Job posts are stored both under the employer's profile and in a top-level collection to allow for public listing and simple reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the requested user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user ID matches the requested user ID and the resource exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description JobSeeker profiles are private and only accessible to the user themselves.
     * @path /jobSeekers/{jobSeekerId}
     * @allow (create) Signed-in user with UID 'user123' can create a jobSeeker document with ID 'user123'.
     * @allow (get, update, delete) Signed-in user with UID 'user123' can access and modify their own jobSeeker profile with ID 'user123'.
     * @deny (create) Signed-in user with UID 'user123' cannot create a jobSeeker document with ID 'user456'.
     * @deny (get, update, delete) Signed-in user with UID 'user123' cannot access or modify a jobSeeker profile with ID 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /jobSeekers/{jobSeekerId} {
      allow get: if isOwner(jobSeekerId);
      allow list: if false;
      allow create: if isOwner(jobSeekerId);
      allow update: if isExistingOwner(jobSeekerId);
      allow delete: if isExistingOwner(jobSeekerId);
    }

    /**
     * @description Saved jobs are stored under the job seeker's profile and are only accessible to the user themselves.
     * @path /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}
     * @allow (create) Signed-in user with UID 'user123' can create a savedJob document under their jobSeeker profile with ID 'user123'.
     * @allow (get, update, delete) Signed-in user with UID 'user123' can access and modify savedJob documents under their own jobSeeker profile with ID 'user123'.
     * @deny (create) Signed-in user with UID 'user123' cannot create a savedJob document under jobSeeker profile with ID 'user456'.
     * @deny (get, update, delete) Signed-in user with UID 'user123' cannot access or modify savedJob documents under jobSeeker profile with ID 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId} {
      allow get: if isOwner(jobSeekerId);
      allow list: if isOwner(jobSeekerId);
      allow create: if isOwner(jobSeekerId);
      allow update: if isExistingOwner(jobSeekerId);
      allow delete: if isExistingOwner(jobSeekerId);
    }

    /**
     * @description Employer profiles are private and only accessible to the employer themselves.
     * @path /employers/{employerId}
     * @allow (create) Signed-in user with UID 'employer123' can create an employer document with ID 'employer123'.
     * @allow (get, update, delete) Signed-in user with UID 'employer123' can access and modify their own employer profile with ID 'employer123'.
     * @deny (create) Signed-in user with UID 'employer123' cannot create an employer document with ID 'employer456'.
     * @deny (get, update, delete) Signed-in user with UID 'employer123' cannot access or modify an employer profile with ID 'employer456'.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{employerId} {
      allow get: if isOwner(employerId);
      allow list: if false;
      allow create: if isOwner(employerId);
      allow update: if isExistingOwner(employerId);
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Job posts are stored under the employer's profile and are only accessible to the employer themselves.
     * @path /employers/{employerId}/jobPosts/{jobPostId}
     * @allow (create) Signed-in user with UID 'employer123' can create a jobPost document under their employer profile with ID 'employer123'.
     * @allow (get, update, delete) Signed-in user with UID 'employer123' can access and modify jobPost documents under their own employer profile with ID 'employer123'.
     * @deny (create) Signed-in user with UID 'employer123' cannot create a jobPost document under employer profile with ID 'employer456'.
     * @deny (get, update, delete) Signed-in user with UID 'employer123' cannot access or modify jobPost documents under employer profile with ID 'employer456'.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{employerId}/jobPosts/{jobPostId} {
      allow get: if isOwner(employerId);
      allow list: if isOwner(employerId);
      allow create: if isOwner(employerId);
      allow update: if isExistingOwner(employerId);
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Job applications are stored under the employer's job post and are only accessible to the employer themselves.
     * @path /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}
     * @allow (create) Signed-in user with UID 'employer123' can create a jobApplication document under their jobPost with ID 'employer123'.
     * @allow (get, update, delete) Signed-in user with UID 'employer123' can access and modify jobApplication documents under their own jobPost with ID 'employer123'.
     * @deny (create) Signed-in user with UID 'employer123' cannot create a jobApplication document under jobPost with ID 'employer456'.
     * @deny (get, update, delete) Signed-in user with UID 'employer123' cannot access or modify jobApplication documents under jobPost with ID 'employer456'.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId} {
      allow get: if isOwner(employerId);
      allow list: if isOwner(employerId);
      allow create: if isOwner(employerId);
      allow update: if isExistingOwner(employerId);
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Blogs are publicly readable, but only authorized users can create, update, or delete them.
     * @path /blogs/{blogId}
     * @allow (get, list) Any user can read blog posts.
     * @deny (create, update, delete) No user can create, update, or delete blog posts in this prototype.
     * @principle Public read access with restricted write access.
     */
    match /blogs/{blogId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Company reviews can be created by any signed-in user.
     * @path /companyReviews/{companyReviewId}
     * @allow (create) Any signed-in user can create a company review.
     * @deny (get, list, update, delete) No user can get, list, update, or delete company reviews in this prototype.
     * @principle Allows any signed-in user to create reviews.
     */
    match /companyReviews/{companyReviewId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Job posts are stored in a top-level collection to allow for public listing and simple reads.
     * @path /jobPosts/{jobPostId}
     * @allow (get, list) Any user can read job posts.
     * @deny (create, update, delete) No user can create, update, or delete job posts in this prototype.
     * @principle Public read access.
     */
    match /jobPosts/{jobPostId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}