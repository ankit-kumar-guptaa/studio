/**
 * @fileoverview Firestore Security Rules for Hiring Dekho platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles (JobSeekers and Employers) and their associated data.
 * Public read access is granted to job postings and blog posts.
 *
 * Data Structure:
 * - /jobSeekers/{jobSeekerId}: Stores job seeker profiles.
 * - /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}: Stores jobs saved by a job seeker.
 * - /employers/{employerId}: Stores employer profiles.
 * - /employers/{employerId}/jobPosts/{jobPostId}: Stores job postings associated with an employer.
 * - /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}: Stores job applications for a specific job post.
 * - /blogs/{blogId}: Stores blog posts.
 * - /companyReviews/{companyReviewId}: Stores company reviews.
 * - /jobPosts/{jobPostId}: Stores all job posts.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - JobSeekers and Employers can only manage their own profiles and related data.
 * - Job posts are publicly readable but can only be created, updated, or deleted by the owning employer.
 * - The 'jobPosts' collection at the root is intended to be publicly readable, thus the rules allow listing.
 *
 * Denormalization for Authorization:
 * - For SavedJob documents under /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}, the actual JobPost data is copied. This avoids needing to query the /jobPosts collection during reads, which would be impossible under security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Secures job seeker profiles. Only the job seeker can read or write their own profile.
     * @path /jobSeekers/{jobSeekerId}
     * @allow (create) - A job seeker can create their profile if the ID matches their auth UID.
     * @allow (get, update, delete) - A job seeker can get, update, and delete their profile if the ID matches their auth UID.
     * @deny (create, get, update, delete) - Any other user cannot access another job seeker's profile.
     * @principle Enforces document ownership for writes.
     */
    match /jobSeekers/{jobSeekerId} {
      allow get: if isOwner(jobSeekerId);
      allow list: if false;
      allow create: if isOwner(jobSeekerId) && request.resource.data.id == jobSeekerId;
      allow update: if isExistingOwner(jobSeekerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(jobSeekerId);
    }

    /**
     * @description Secures saved jobs for a job seeker. Only the job seeker can manage their saved jobs.
     * @path /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}
     * @allow (create, get, update, delete) - A job seeker can manage jobs saved under their profile.
     * @deny (create, get, update, delete) - Any other user cannot access another job seeker's saved jobs.
     * @principle Enforces document ownership for writes.
     */
    match /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId} {
      allow get: if isOwner(jobSeekerId);
      allow list: if isOwner(jobSeekerId);
      allow create: if isOwner(jobSeekerId);
      allow update: if isExistingOwner(jobSeekerId);
      allow delete: if isExistingOwner(jobSeekerId);
    }

    /**
     * @description Secures employer profiles. Only the employer can read or write their own profile.
     * @path /employers/{employerId}
     * @allow (create) - An employer can create their profile if the ID matches their auth UID.
     * @allow (get, update, delete) - An employer can get, update, and delete their profile if the ID matches their auth UID.
     * @deny (create, get, update, delete) - Any other user cannot access another employer's profile.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{employerId} {
      allow get: if isOwner(employerId);
      allow list: if false;
      allow create: if isOwner(employerId) && request.resource.data.id == employerId;
      allow update: if isExistingOwner(employerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Secures job postings created by an employer. Only the employer can manage their job postings.
     * @path /employers/{employerId}/jobPosts/{jobPostId}
     * @allow (create, get, update, delete) - An employer can manage job postings under their profile.
     * @deny (create, get, update, delete) - Any other user cannot access another employer's job postings.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{employerId}/jobPosts/{jobPostId} {
      allow get: if true;
      allow list: if true;
      allow create: if isOwner(employerId);
      allow update: if isExistingOwner(employerId);
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Secures job applications for a specific job post. Only the employer who owns the job post can manage applications.
     * @path /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}
     * @allow (create, get, update, delete) - The employer who owns the job post can manage the applications.
     * @deny (create, get, update, delete) - Any other user cannot access these applications.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId} {
      allow get: if isOwner(employerId);
      allow list: if isOwner(employerId);
      allow create: if isOwner(employerId);
      allow update: if isExistingOwner(employerId);
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Allows public read access to blog posts, but restricts creation, updating, and deletion.
     * @path /blogs/{blogId}
     * @allow (get, list) - Anyone can read blog posts.
     * @deny (create, update, delete) - Only authorized users (e.g., admins) can create, update, or delete blog posts.
     * @principle Allows public read with restricted writes.
     */
    match /blogs/{blogId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to company reviews.
     * @path /companyReviews/{companyReviewId}
     * @allow (get, list) - Anyone can read the company reviews.
     * @deny (create, update, delete) - Only authenticated users can create reviews. Update and delete should be restricted to the owner or admin, but is disabled here for prototyping
     * @principle Requires authentication for creating company reviews.
     */
    match /companyReviews/{companyReviewId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to job posts, but restricts creation, updating, and deletion.
     * @path /jobPosts/{jobPostId}
     * @allow (get, list) - Anyone can read and list job posts.
     * @deny (create, update, delete) - Job posts can only be created/managed under the owning employer.
     * @principle Allows public read with restricted writes.
     */
    match /jobPosts/{jobPostId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}