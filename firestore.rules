/**
 * @description This ruleset enforces a strict user-ownership model for job seekers and employers,
 *              allowing users to manage their own profiles, job posts, saved jobs, and applications.
 *              Public read access is granted to job posts and blogs, while company reviews are accessible with specific ownership requirements.
 *
 * @dataStructure
 *   - /jobSeekers/{jobSeekerId}: Job seeker profiles, accessible only by the owner.
 *   - /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}: Jobs saved by a job seeker, accessible only by the owner.
 *   - /jobSeekers/{jobSeekerId}/applications/{applicationId}: Job applications submitted by a job seeker, accessible only by the owner.
 *   - /employers/{employerId}: Employer profiles, accessible only by the owner.
 *   - /employers/{employerId}/jobPosts/{jobPostId}: Job posts created by an employer, accessible only by the owner.
 *   - /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}: Job applications for a specific job post, accessible only by the owning employer.
 *   - /jobPosts/{jobPostId}: Public collection of all job posts, read-only for all users, writeable only by the job post owner.
 *   - /blogs/{blogId}: Public collection of blog posts, read-only for all users.
 *   - /companyReviews/{companyReviewId}: Company reviews, writeable by both the job seeker and the employer.
 *
 * @keySecurityDecisions
 *   - User listing is disallowed for both job seekers and employers.
 *   - Job posts are publicly readable, but only the owning employer can modify them.
 *   - Saved jobs and applications are private to the job seeker.
 *   - All write operations require a verified user identity.
 *
 * @denormalizationForAuthorization
 *   - The `JobPost` entity in `/jobPosts/{jobPostId}` must contain the `employerId` to enforce owner-only writes.
 *
 * @structuralSegregation
 *   - Private user data is stored under the respective user document (e.g., `/jobSeekers/{jobSeekerId}`).
 *   - Public job posts are stored in a separate top-level collection (`/jobPosts`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to job seeker profiles.
     * @path /jobSeekers/{jobSeekerId}
     * @allow (create) User with ID 'testUser' can create their profile at /jobSeekers/testUser if request.auth.uid == 'testUser'.
     * @allow (get) User with ID 'testUser' can read their profile at /jobSeekers/testUser if request.auth.uid == 'testUser'.
     * @allow (update) User with ID 'testUser' can update their profile at /jobSeekers/testUser if request.auth.uid == 'testUser'.
     * @allow (delete) User with ID 'testUser' can delete their profile at /jobSeekers/testUser if request.auth.uid == 'testUser'.
     * @deny (create) User with ID 'testUser' cannot create a profile for another user at /jobSeekers/otherUser.
     * @deny (get) User with ID 'testUser' cannot read another user's profile at /jobSeekers/otherUser.
     * @deny (update) User with ID 'testUser' cannot update another user's profile at /jobSeekers/otherUser.
     * @deny (delete) User with ID 'testUser' cannot delete another user's profile at /jobSeekers/otherUser.
     * @principle Enforces document ownership for all operations.
     */
    match /jobSeekers/{jobSeekerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(jobSeekerId);
      allow list: if false;
      allow create: if isOwner(jobSeekerId) && request.resource.data.id == jobSeekerId;
      allow update: if isExistingOwner(jobSeekerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(jobSeekerId);
    }

    /**
     * @description Grants access to saved jobs for a specific job seeker.
     * @path /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}
     * @allow (create) User with ID 'testUser' can save a job at /jobSeekers/testUser/savedJobs/job1 if request.auth.uid == 'testUser'.
     * @allow (get) User with ID 'testUser' can read a saved job at /jobSeekers/testUser/savedJobs/job1 if request.auth.uid == 'testUser'.
     * @allow (list) User with ID 'testUser' can list their saved jobs at /jobSeekers/testUser/savedJobs if request.auth.uid == 'testUser'.
     * @allow (update) User with ID 'testUser' can update a saved job at /jobSeekers/testUser/savedJobs/job1 if request.auth.uid == 'testUser'.
     * @allow (delete) User with ID 'testUser' can delete a saved job at /jobSeekers/testUser/savedJobs/job1 if request.auth.uid == 'testUser'.
     * @deny (create) User with ID 'testUser' cannot save a job for another user at /jobSeekers/otherUser/savedJobs/job1.
     * @deny (get) User with ID 'testUser' cannot read another user's saved job at /jobSeekers/otherUser/savedJobs/job1.
     * @deny (list) User with ID 'testUser' cannot list another user's saved jobs at /jobSeekers/otherUser/savedJobs.
     * @deny (update) User with ID 'testUser' cannot update another user's saved job at /jobSeekers/otherUser/savedJobs/job1.
     * @deny (delete) User with ID 'testUser' cannot delete another user's saved job at /jobSeekers/otherUser/savedJobs/job1.
     * @principle Enforces document ownership for all operations.
     */
    match /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(jobSeekerId);
      allow list: if isOwner(jobSeekerId);
      allow create: if isOwner(jobSeekerId);
      allow update: if isExistingOwner(jobSeekerId);
      allow delete: if isExistingOwner(jobSeekerId);
    }

     /**
      * @description Grants access to job applications for a specific job seeker.
      * @path /jobSeekers/{jobSeekerId}/applications/{applicationId}
      * @allow (create) User with ID 'testUser' can create an application at /jobSeekers/testUser/applications/app1 if request.auth.uid == 'testUser'.
      * @allow (get) User with ID 'testUser' can read their application at /jobSeekers/testUser/applications/app1 if request.auth.uid == 'testUser'.
      * @allow (list) User with ID 'testUser' can list their applications at /jobSeekers/testUser/applications if request.auth.uid == 'testUser'.
      * @allow (update) User with ID 'testUser' can update their application at /jobSeekers/testUser/applications/app1 if request.auth.uid == 'testUser'.
      * @allow (delete) User with ID 'testUser' can delete their application at /jobSeekers/testUser/applications/app1 if request.auth.uid == 'testUser'.
      * @deny (create) User with ID 'testUser' cannot create an application for another user at /jobSeekers/otherUser/applications/app1.
      * @deny (get) User with ID 'testUser' cannot read another user's application at /jobSeekers/otherUser/applications/app1.
      * @deny (list) User with ID 'testUser' cannot list another user's applications at /jobSeekers/otherUser/applications.
      * @deny (update) User with ID 'testUser' cannot update another user's application at /jobSeekers/otherUser/applications/app1.
      * @deny (delete) User with ID 'testUser' cannot delete another user's application at /jobSeekers/otherUser/applications/app1.
      * @principle Enforces document ownership for all operations.
      */
    match /jobSeekers/{jobSeekerId}/applications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(jobSeekerId);
      allow list: if isOwner(jobSeekerId);
      allow create: if isOwner(jobSeekerId);
      allow update: if isExistingOwner(jobSeekerId);
      allow delete: if isExistingOwner(jobSeekerId);
    }

    /**
     * @description Grants access to employer profiles.
     * @path /employers/{employerId}
     * @allow (create) User with ID 'testEmployer' can create their profile at /employers/testEmployer if request.auth.uid == 'testEmployer'.
     * @allow (get) User with ID 'testEmployer' can read their profile at /employers/testEmployer if request.auth.uid == 'testEmployer'.
     * @allow (update) User with ID 'testEmployer' can update their profile at /employers/testEmployer if request.auth.uid == 'testEmployer'.
     * @allow (delete) User with ID 'testEmployer' can delete their profile at /employers/testEmployer if request.auth.uid == 'testEmployer'.
     * @deny (create) User with ID 'testEmployer' cannot create a profile for another employer at /employers/otherEmployer.
     * @deny (get) User with ID 'testEmployer' cannot read another employer's profile at /employers/otherEmployer.
     * @deny (update) User with ID 'testEmployer' cannot update another employer's profile at /employers/otherEmployer.
     * @deny (delete) User with ID 'testEmployer' cannot delete another employer's profile at /employers/otherEmployer.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{employerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
      }

      function isExistingOwner(employerId) {
          return isOwner(employerId) && resource != null;
      }

      allow get: if isOwner(employerId);
      allow list: if false;
      allow create: if isOwner(employerId) && request.resource.data.id == employerId;
      allow update: if isExistingOwner(employerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Grants access to job posts created by a specific employer.
     * @path /employers/{employerId}/jobPosts/{jobPostId}
     * @allow (create) User with ID 'testEmployer' can create a job post at /employers/testEmployer/jobPosts/job1 if request.auth.uid == 'testEmployer'.
     * @allow (get) User with ID 'testEmployer' can read their job post at /employers/testEmployer/jobPosts/job1 if request.auth.uid == 'testEmployer'.
     * @allow (list) User with ID 'testEmployer' can list their job posts at /employers/testEmployer/jobPosts if request.auth.uid == 'testEmployer'.
     * @allow (update) User with ID 'testEmployer' can update their job post at /employers/testEmployer/jobPosts/job1 if request.auth.uid == 'testEmployer'.
     * @allow (delete) User with ID 'testEmployer' can delete their job post at /employers/testEmployer/jobPosts/job1 if request.auth.uid == 'testEmployer'.
     * @deny (create) User with ID 'testEmployer' cannot create a job post for another employer at /employers/otherEmployer/jobPosts/job1.
     * @deny (get) User with ID 'testEmployer' cannot read another employer's job post at /employers/otherEmployer/jobPosts/job1.
     * @deny (list) User with ID 'testEmployer' cannot list another employer's job posts at /employers/otherEmployer/jobPosts.
     * @deny (update) User with ID 'testEmployer' cannot update another employer's job post at /employers/otherEmployer/jobPosts/job1.
     * @deny (delete) User with ID 'testEmployer' cannot delete another employer's job post at /employers/otherEmployer/jobPosts/job1.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{employerId}/jobPosts/{jobPostId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
      }

      function isExistingOwner(employerId) {
          return isOwner(employerId) && resource != null;
      }

      allow get: if isOwner(employerId);
      allow list: if isOwner(employerId);
      allow create: if isOwner(employerId);
      allow update: if isExistingOwner(employerId);
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Grants access to job applications for a specific job post, accessible only by the owning employer.
     * @path /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}
     * @allow (create) User with ID 'testEmployer' can create an application at /employers/testEmployer/jobPosts/job1/applications/app1 if request.auth.uid == 'testEmployer'.
     * @allow (get) User with ID 'testEmployer' can read an application at /employers/testEmployer/jobPosts/job1/applications/app1 if request.auth.uid == 'testEmployer'.
     * @allow (list) User with ID 'testEmployer' can list applications at /employers/testEmployer/jobPosts/job1/applications if request.auth.uid == 'testEmployer'.
     * @allow (update) User with ID 'testEmployer' can update an application at /employers/testEmployer/jobPosts/job1/applications/app1 if request.auth.uid == 'testEmployer'.
     * @allow (delete) User with ID 'testEmployer' can delete an application at /employers/testEmployer/jobPosts/job1/applications/app1 if request.auth.uid == 'testEmployer'.
     * @deny (create) User with ID 'testEmployer' cannot create an application for another employer at /employers/otherEmployer/jobPosts/job1/applications/app1.
     * @deny (get) User with ID 'testEmployer' cannot read another employer's application at /employers/otherEmployer/jobPosts/job1/applications/app1.
     * @deny (list) User with ID 'testEmployer' cannot list another employer's applications at /employers/otherEmployer/jobPosts/job1/applications.
     * @deny (update) User with ID 'testEmployer' cannot update another employer's application at /employers/otherEmployer/jobPosts/job1/applications/app1.
     * @deny (delete) User with ID 'testEmployer' cannot delete another employer's application at /employers/otherEmployer/jobPosts/job1/applications/app1.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
      }

      function isExistingOwner(employerId) {
          return isOwner(employerId) && resource != null;
      }

      allow get: if isOwner(employerId);
      allow list: if isOwner(employerId);
      allow create: if isOwner(employerId);
      allow update: if isExistingOwner(employerId);
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Grants public read access to job posts, but restricts write access to the job post owner.
     * @path /jobPosts/{jobPostId}
     * @allow (get) Any user can read a job post at /jobPosts/job1.
     * @allow (list) Any user can list job posts at /jobPosts.
     * @allow (create) User with ID 'testEmployer' can create a job post at /jobPosts/job1 if request.auth.uid == 'testEmployer' and request.resource.data.employerId == 'testEmployer'.
     * @allow (update) User with ID 'testEmployer' can update their job post at /jobPosts/job1 if request.auth.uid == 'testEmployer' and resource.data.employerId == 'testEmployer'.
     * @allow (delete) User with ID 'testEmployer' can delete their job post at /jobPosts/job1 if request.auth.uid == 'testEmployer' and resource.data.employerId == 'testEmployer'.
     * @deny (create) User with ID 'testSeeker' cannot create a job post at /jobPosts/job1.
     * @deny (update) User with ID 'testSeeker' cannot update another user's job post at /jobPosts/job1.
     * @deny (delete) User with ID 'testSeeker' cannot delete another user's job post at /jobPosts/job1.
     * @principle Allows public reads with owner-only writes.
     */
    match /jobPosts/{jobPostId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
      }

       function isExistingOwner(employerId) {
          return isOwner(employerId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.employerId);
      allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Grants public read access to blog posts.
     * @path /blogs/{blogId}
     * @allow (get) Any user can read a blog post at /blogs/blog1.
     * @allow (list) Any user can list blog posts at /blogs.
     * @deny (create) No user can create a blog post.
     * @deny (update) No user can update a blog post.
     * @deny (delete) No user can delete a blog post.
     * @principle Allows public reads with no writes allowed.
     */
    match /blogs/{blogId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to company reviews. Both the job seeker and employer are required
     *              to be able to create reviews.
     * @path /companyReviews/{companyReviewId}
     * @allow (create) User with ID 'testUser' can create a review if request.auth.uid is 'testUser'.
     * @allow (get) Any user can read a company review.
     * @allow (list) Any user can list company reviews.
     * @allow (update) No user can update a company review.
     * @allow (delete) No user can delete a company review.
     * @deny (create) Non-authenticated user can not create a company review.
     * @principle Allows public reads with restricted writes.
     */
    match /companyReviews/{companyReviewId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}