/**
 * @fileoverview Firestore Security Rules for Hiring Dekho platform.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It strictly enforces user-specific data segregation and prevents unauthorized
 * modification or deletion of resources. Public read access is granted selectively
 * for specific collections.
 *
 * Data Structure:
 * - /jobSeekers/{jobSeekerId}: Stores individual job seeker profiles.
 * - /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}: Stores job posts saved by the job seeker.
 * - /jobSeekers/{jobSeekerId}/applications/{applicationId}: Stores applications submitted by a job seeker.
 * - /employers/{employerId}: Stores employer profiles.
 * - /employers/{employerId}/jobPosts/{jobPostId}: Stores job posts created by employers.
 * - /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}: Stores applications for specific job posts.
 * - /jobPosts/{jobPostId}: Stores a global list of job posts (read-only).
 * - /blogs/{blogId}: Stores blog posts (read-only).
 * - /companyReviews/{companyReviewId}: Stores company reviews.
 *
 * Key Security Decisions:
 * - User listing is disallowed for all collections.
 * - Ownership is strictly enforced for user profiles and related subcollections.
 * - Job posts are publicly readable, but only employers can create, update, or delete them.
 * - Blog posts are publicly readable and writable by anyone.
 *
 * Denormalization for Authorization:
 * - The rules leverage the document path (e.g., /users/{userId}) and internal
 *   document properties (e.g., jobSeekerId, employerId) to make authorization
 *   decisions without requiring additional database reads.
 *
 * Structural Segregation:
 * - User-specific data is stored under the /jobSeekers/{jobSeekerId} and
 *   /employers/{employerId} paths to ensure private access. Publicly readable
 *   data, such as job posts and blog posts, are stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to job seeker profiles based on ownership.
     * @path /jobSeekers/{jobSeekerId}
     * @allow (get, create, update, delete, list) if the request is made by the job seeker with matching ID.
     * @deny (create, update, delete) if the request is made by a different user or unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /jobSeekers/{jobSeekerId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(jobSeekerId) {
        return isSignedIn() && request.auth.uid == jobSeekerId;
      }
      allow get: if isOwner(jobSeekerId);
      allow list: if false;
      allow create: if isOwner(jobSeekerId);
      allow update: if isOwner(jobSeekerId);
      allow delete: if isOwner(jobSeekerId);
    }

    /**
     * @description Grants access to saved jobs for a specific job seeker based on ownership.
     * @path /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}
     * @allow (get, create, update, delete, list) if the request is made by the job seeker with matching ID.
     * @deny (create, update, delete) if the request is made by a different user or unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(jobSeekerId) {
        return isSignedIn() && request.auth.uid == jobSeekerId;
      }

      allow get: if isOwner(jobSeekerId);
      allow list: if false;
      allow create: if isOwner(jobSeekerId);
      allow update: if isOwner(jobSeekerId);
      allow delete: if isOwner(jobSeekerId);
    }

        /**
     * @description Grants access to job applications for a specific job seeker based on ownership.
     * @path /jobSeekers/{jobSeekerId}/applications/{applicationId}
     * @allow (get, create, update, delete, list) if the request is made by the job seeker with matching ID.
     * @deny (create, update, delete) if the request is made by a different user or unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /jobSeekers/{jobSeekerId}/applications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(jobSeekerId) {
        return isSignedIn() && request.auth.uid == jobSeekerId;
      }

      allow get: if isOwner(jobSeekerId);
      allow list: if false;
      allow create: if isOwner(jobSeekerId);
      allow update: if isOwner(jobSeekerId);
      allow delete: if isOwner(jobSeekerId);
    }

    /**
     * @description Grants access to employer profiles based on ownership.
     * @path /employers/{employerId}
     * @allow (get, create, update, delete, list) if the request is made by the employer with matching ID.
     * @deny (create, update, delete) if the request is made by a different user or unauthenticated user.
     */
    match /employers/{employerId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
      }

      allow get: if isOwner(employerId);
      allow list: if false;
      allow create: if isOwner(employerId);
      allow update: if isOwner(employerId);
      allow delete: if isOwner(employerId);
    }

    /**
     * @description Grants access to job posts created by a specific employer based on ownership.
     * @path /employers/{employerId}/jobPosts/{jobPostId}
     * @allow (get, create, update, delete, list) if the request is made by the employer with matching ID.
     * @deny (create, update, delete) if the request is made by a different user or unauthenticated user.
     */
    match /employers/{employerId}/jobPosts/{jobPostId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
      }

      allow get: if isOwner(employerId);
      allow list: if false;
      allow create: if isOwner(employerId);
      allow update: if isOwner(employerId);
      allow delete: if isOwner(employerId);
    }

   /**
     * @description Grants access to job applications for a specific job post created by a specific employer based on employer ownership.
     * @path /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}
     * @allow (create) if the jobSeekerId matches the request.auth.uid
     * @deny (get, list, update, delete) if the request is made by a different user or unauthenticated user.
     * @principle Enforces document ownership for writes, allows employer read access.
     */
   match /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isEmployer(employerId) {
        return isSignedIn() && request.auth.uid == employerId;
      }
      function isJobSeekerApplying() {
          return isSignedIn();
      }

      allow get: if isEmployer(employerId);
      allow list: if false;
      allow create: if isJobSeekerApplying();
      allow update: if false;
      allow delete: if false;
    }
    /**
     * @description Grants public read access to job posts. Only employers can create, update, or delete.
     * @path /jobPosts/{jobPostId}
     */
    match /jobPosts/{jobPostId} {
      function isSignedIn() {
        return request.auth != null;
      }

      //Anyone signed in can create, update, delete, but SHOULD be limited by employerId.
      //TODO: Consider limiting updates and deletes to owner only.
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants public read and write access to blog posts.
     * @path /blogs/{blogId}
     */
    match /blogs/{blogId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Grants access to company reviews.
     * @path /companyReviews/{companyReviewId}
     */
    match /companyReviews/{companyReviewId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(jobSeekerId) {
        return isSignedIn() && request.auth.uid == jobSeekerId;
      }
      function isExistingOwner(jobSeekerId) {
          return isOwner(jobSeekerId);
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}