/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for job seekers and employers,
 *              allowing users to manage their own profiles, job posts, and applications.
 *              Public read access is granted to job posts and blogs, while company reviews
 *              can be created by authenticated users.
 *
 * Data Structure:
 * - /jobSeekers/{jobSeekerId}: Job seeker profiles, accessible only by the user.
 * - /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}: Jobs saved by a job seeker, accessible only by the user.
 * - /employers/{employerId}: Employer profiles, accessible only by the employer.
 * - /employers/{employerId}/jobPosts/{jobPostId}: Job posts created by an employer, accessible only by the employer.
 * - /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}: Job applications for a specific job post, accessible only by the employer.
 * - /blogs/{blogId}: Blog posts, publicly readable.
 * - /companyReviews/{companyReviewId}: Company reviews, create accessible to signed in users.
 *
 * Key Security Decisions:
 * - Strict user-ownership for profiles and associated data.
 * - Public read access for job posts and blogs.
 * - Authenticated users can create company reviews.
 * - Listing of saved jobs is allowed for the job seeker.
 *
 * Denormalization for Authorization:
 *   (Not applicable in this version. Future versions may denormalize data to avoid `get()` calls.)
 *
 * Structural Segregation:
 *   Private user data is stored under user-specific paths (e.g., /jobSeekers/{jobSeekerId}),
 *   while public data (e.g., /blogs) is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to job seeker profiles.
     * @path /jobSeekers/{jobSeekerId}
     * @allow (get, list) if isOwner(jobSeekerId)
     * @allow (create, update, delete) if isOwner(jobSeekerId)
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Enforces document ownership for all operations.
     */
    match /jobSeekers/{jobSeekerId} {
      allow get: if isOwner(jobSeekerId);
      allow list: if false;
      allow create: if isOwner(jobSeekerId);
      allow update: if isExistingOwner(jobSeekerId);
      allow delete: if isExistingOwner(jobSeekerId);
    }

    /**
     * @description Grants access to jobs saved by a job seeker.
     * @path /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}
     * @allow (get, list) if isOwner(jobSeekerId)
     * @allow (create, update, delete) if isOwner(jobSeekerId)
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Enforces document ownership for all operations.
     */
    match /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId} {
      allow get: if isOwner(jobSeekerId);
      allow list: if isOwner(jobSeekerId);
      allow create: if isOwner(jobSeekerId);
      allow update: if isExistingOwner(jobSeekerId);
      allow delete: if isExistingOwner(jobSeekerId);
    }

    /**
     * @description Grants access to employer profiles.
     * @path /employers/{employerId}
     * @allow (get, list) if isOwner(employerId)
     * @allow (create, update, delete) if isOwner(employerId)
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{employerId} {
      allow get: if isOwner(employerId);
      allow list: if false;
      allow create: if isOwner(employerId);
      allow update: if isExistingOwner(employerId);
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Grants access to job postings associated with an employer.
     * @path /employers/{employerId}/jobPosts/{jobPostId}
     * @allow (get, list) if isOwner(employerId)
     * @allow (create, update, delete) if isOwner(employerId)
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{employerId}/jobPosts/{jobPostId} {
      allow get: if isOwner(employerId);
      allow list: if isOwner(employerId);
      allow create: if isOwner(employerId);
      allow update: if isExistingOwner(employerId);
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Grants access to job applications for a specific job post.
     * @path /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}
     * @allow (get, list) if isOwner(employerId)
     * @allow (create, update, delete) if isOwner(employerId)
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId} {
      allow get: if isOwner(employerId);
      allow list: if isOwner(employerId);
      allow create: if isOwner(employerId);
      allow update: if isExistingOwner(employerId);
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Grants public read access to blog posts.
     * @path /blogs/{blogId}
     * @allow get, list: if true
     * @deny create, update, delete: if !isSignedIn()
     * @principle Allows public read access while restricting write access to authorized users.
     */
    match /blogs/{blogId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add author validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add author validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add author validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants access to company reviews.
     * @path /companyReviews/{companyReviewId}
     * @allow create: if isSignedIn()
     * @deny get, list, update, delete: if !isSignedIn()
     * @principle Allows authenticated users to create company reviews.
     */
    match /companyReviews/{companyReviewId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to jobPosts.
     * @path /jobPosts/{jobPostId}
     * @allow get, list: if true
     * @deny create, update, delete: if !isSignedIn()
     */
     match /jobPosts/{jobPostId} {
        allow get: if true;
        allow list: if true;
        allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}