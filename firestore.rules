/**
 * @fileOverview Firestore Security Rules for Hiring Dekho platform.
 *
 * Core Philosophy:
 * This ruleset prioritizes user-level access control, ensuring that users can only
 * access their own data or data explicitly shared with them. It takes a flexible
 * approach to data validation during this prototyping phase.
 *
 * Data Structure:
 * The Firestore data is organized as follows:
 * - /jobSeekers/{jobSeekerId}: Stores job seeker profiles.
 * - /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}: Stores saved job posts for a job seeker.
 * - /employers/{employerId}: Stores employer profiles.
 * - /employers/{employerId}/jobPosts/{jobPostId}: Stores job posts created by an employer.
 * - /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}: Stores job applications for a specific job post.
 * - /blogs/{blogId}: Stores blog posts.
 * - /companyReviews/{companyReviewId}: Stores company reviews.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, or delete their own profiles and related data.
 * - Public read access is granted to job posts and blogs.
 *
 * Denormalization for Authorization:
 *  - The rules assume that any data needed for authorization (e.g., ownerId) is
 *    denormalized directly onto the documents being secured. This avoids costly
 *    `get()` operations within the rules.
 *
 * Structural Segregation:
 *  - Private user data (profiles, saved jobs) is stored under the /users/{userId}
 *    path, while public content (job posts, blogs) is stored in top-level collections.
 *    This segregation simplifies access control and improves query performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to job posts. Public read, owner-only write.
     * @path /jobPosts/{jobPostId}
     * @allow (list) Signed-in user can list all job posts.
     * @allow (get) Signed-in user can get any job post.
     * @deny (create) Any user cannot create a jobPost document (as there is no ownership field)
     * @deny (update) Any user cannot update a jobPost document (as there is no ownership field)
     * @deny (delete) Any user cannot delete a jobPost document (as there is no ownership field)
     * @principle Public read, owner-only write (requires 'ownerId' field).
     */
    match /jobPosts/{jobPostId} {
      allow get, list: if true; // Public read access to all job posts

      // CRITICAL: Cannot implement owner-only writes. The 'JobPost' entity is missing an 'ownerId' or 'authorId' field.
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages job seeker profiles.
     * @path /jobSeekers/{jobSeekerId}
     * @allow (create) User can create their own profile if the user ID matches.
     * @allow (get) User can read their own profile if the user ID matches.
     * @allow (update) User can update their own profile if the user ID matches and the document exists.
     * @allow (delete) User can delete their own profile if the user ID matches and the document exists.
     * @deny (create) User cannot create a profile with a mismatched user ID.
     * @deny (get) User cannot read another user's profile.
     * @deny (update) User cannot update another user's profile.
     * @deny (delete) User cannot delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /jobSeekers/{jobSeekerId} {
      allow create: if isSignedIn() && isOwner(jobSeekerId) && request.resource.data.id == jobSeekerId;
      allow get: if isSignedIn() && isOwner(jobSeekerId);
      allow update: if isSignedIn() && isExistingOwner(jobSeekerId) && (request.resource.data.id == resource.data.id);
      allow delete: if isSignedIn() && isExistingOwner(jobSeekerId);
      allow list: if false;
    }

    /**
     * @description Manages saved jobs for a job seeker.
     * @path /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}
     * @allow (create) User can save a job post if the user ID matches.
     * @allow (get) User can read a saved job post if the user ID matches.
     * @allow (update) User can update a saved job post if the user ID matches and the document exists.
     * @allow (delete) User can delete a saved job post if the user ID matches and the document exists.
     * @deny (create) User cannot save a job post for another user.
     * @deny (get) User cannot read another user's saved job post.
     * @deny (update) User cannot update another user's saved job post.
     * @deny (delete) User cannot delete another user's saved job post.
     * @principle Enforces document ownership for all operations.
     */
    match /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId} {
      allow create: if isSignedIn() && isOwner(jobSeekerId);
      allow get: if isSignedIn() && isOwner(jobSeekerId);
      allow update: if isSignedIn() && isExistingOwner(jobSeekerId);
      allow delete: if isSignedIn() && isExistingOwner(jobSeekerId);
      allow list: if isOwner(jobSeekerId);
    }

    /**
     * @description Manages employer profiles.
     * @path /employers/{employerId}
     * @allow (create) User can create their own profile if the user ID matches.
     * @allow (get) User can read their own profile if the user ID matches.
     * @allow (update) User can update their own profile if the user ID matches and the document exists.
     * @allow (delete) User can delete their own profile if the user ID matches and the document exists.
     * @deny (create) User cannot create a profile with a mismatched user ID.
     * @deny (get) User cannot read another user's profile.
     * @deny (update) User cannot update another user's profile.
     * @deny (delete) User cannot delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{employerId} {
      allow create: if isSignedIn() && isOwner(employerId) && request.resource.data.id == employerId;
      allow get: if isSignedIn() && isOwner(employerId);
      allow update: if isSignedIn() && isExistingOwner(employerId) && (request.resource.data.id == resource.data.id);
      allow delete: if isSignedIn() && isExistingOwner(employerId);
      allow list: if false;
    }

    /**
     * @description Manages job postings for an employer.
     * @path /employers/{employerId}/jobPosts/{jobPostId}
     * @allow (create) Employer can create a job post if the employer ID matches.
     * @allow (get) Employer can read a job post if the employer ID matches.
     * @allow (update) Employer can update a job post if the employer ID matches and the document exists.
     * @allow (delete) Employer can delete a job post if the employer ID matches and the document exists.
     * @deny (create) Employer cannot create a job post for another employer.
     * @deny (get) Employer cannot read another employer's job post.
     * @deny (update) Employer cannot update another employer's job post.
     * @deny (delete) Employer cannot delete another employer's job post.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{employerId}/jobPosts/{jobPostId} {
      allow create: if isSignedIn() && isOwner(employerId);
      allow get: if true; // Allow all users to view jobs
      allow update: if isSignedIn() && isExistingOwner(employerId);
      allow delete: if isSignedIn() && isExistingOwner(employerId);
      allow list: if true; // Allow all users to list jobs
    }

    /**
     * @description Manages job applications for a specific job post.
     * @path /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}
     * @allow (create) Employer can create a job application if the employer ID matches.
     * @allow (get) Employer can read a job application if the employer ID matches.
     * @allow (update) Employer can update a job application if the employer ID matches and the document exists.
     * @allow (delete) Employer can delete a job application if the employer ID matches and the document exists.
     * @deny (create) Employer cannot create a job application for another employer.
     * @deny (get) Employer cannot read another employer's job application.
     * @deny (update) Employer cannot update another employer's job application.
     * @deny (delete) Employer cannot delete another employer's job application.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId} {
      allow create: if isSignedIn() && isOwner(employerId);
      allow get: if isSignedIn() && isOwner(employerId);
      allow update: if isSignedIn() && isExistingOwner(employerId);
      allow delete: if isSignedIn() && isExistingOwner(employerId);
      allow list: if isOwner(employerId);
    }

    /**
     * @description Manages blog posts.
     * @path /blogs/{blogId}
     * @allow (get) Any user can read any blog post.
     * @allow (list) Any user can list all blog posts.
     * // CRITICAL: Cannot implement owner-only writes. The 'Blog' entity is missing an 'ownerId' or 'authorId' field.
     */
    match /blogs/{blogId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages company reviews.
     * @path /companyReviews/{companyReviewId}
     * // CRITICAL: Cannot implement owner-only writes. The 'Blog' entity is missing an 'ownerId' or 'authorId' field.
     */
    match /companyReviews/{companyReviewId} {
        allow create: if isSignedIn();
        allow get, list: if true;
        allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}