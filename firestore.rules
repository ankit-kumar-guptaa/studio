rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to job seeker profiles. Only the job seeker can read/write their own profile.
     * @path /jobSeekers/{jobSeekerId}
     * @allow (create) - A job seeker can create their profile if the `jobSeekerId` matches their `auth.uid`.
     * @allow (get, update, delete) - A job seeker can only access their own profile.
     * @deny (create) - A job seeker cannot create a profile with an ID that does not match their own `auth.uid`.
     * @deny (get, update, delete) - A job seeker cannot access another job seeker's profile.
     * @principle Enforces document ownership for writes.
     */
    match /jobSeekers/{jobSeekerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(jobSeekerId) {
        return request.auth.uid == jobSeekerId;
      }

      function isExistingOwner(jobSeekerId) {
        return isOwner(jobSeekerId) && resource != null;
      }
      allow get: if isOwner(jobSeekerId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(jobSeekerId);
      allow update: if isExistingOwner(jobSeekerId);
      allow delete: if isExistingOwner(jobSeekerId);
    }

    /**
     * @description Controls access to saved jobs for a specific job seeker. Only the job seeker can read/write their saved jobs.
     * @path /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}
     * @allow (create) - A job seeker can save a job.
     * @allow (get, list, update, delete) - A job seeker can only access their own saved jobs.
     * @deny (create, get, list, update, delete) - A job seeker cannot access another job seeker's saved jobs.
     * @principle Restricts access to a user's own data tree.
     */
    match /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(jobSeekerId) {
        return request.auth.uid == jobSeekerId;
      }

      function isExistingOwner(jobSeekerId) {
        return isOwner(jobSeekerId) && resource != null;
      }
      allow get: if isOwner(jobSeekerId);
      allow list: if isOwner(jobSeekerId);
      allow create: if isSignedIn() && isOwner(jobSeekerId);
      allow update: if isExistingOwner(jobSeekerId);
      allow delete: if isExistingOwner(jobSeekerId);
    }

     /**
      * @description Controls access to job applications for a specific job seeker. Only the job seeker can read/write their job applications.
      * @path /jobSeekers/{jobSeekerId}/applications/{applicationId}
      * @allow (create) - A job seeker can create their job application.
      * @allow (get, list, update, delete) - A job seeker can only access their own job applications.
      * @deny (create, get, list, update, delete) - A job seeker cannot access another job seeker's job applications.
      * @principle Restricts access to a user's own data tree.
      */
    match /jobSeekers/{jobSeekerId}/applications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(jobSeekerId) {
        return request.auth.uid == jobSeekerId;
      }

      function isExistingOwner(jobSeekerId) {
        return isOwner(jobSeekerId) && resource != null;
      }
      allow get: if isOwner(jobSeekerId);
      allow list: if isOwner(jobSeekerId);
      allow create: if isSignedIn() && isOwner(jobSeekerId);
      allow update: if isExistingOwner(jobSeekerId);
      allow delete: if isExistingOwner(jobSeekerId);
    }

    /**
     * @description Controls access to employer profiles. Only the employer can read/write their own profile.
     * @path /employers/{employerId}
     * @allow (create) - An employer can create their profile if the `employerId` matches their `auth.uid`.
     * @allow (get, update, delete) - An employer can only access their own profile.
     * @deny (create) - An employer cannot create a profile with an ID that does not match their own `auth.uid`.
     * @deny (get, update, delete) - An employer cannot access another employer's profile.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{employerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(employerId) {
        return request.auth.uid == employerId;
      }

      function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }
      allow get: if isOwner(employerId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(employerId);
      allow update: if isExistingOwner(employerId);
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Controls access to job posts for a specific employer. Only the employer can read/write their own job posts.
     * @path /employers/{employerId}/jobPosts/{jobPostId}
     * @allow (create) - An employer can create a job post.
     * @allow (get, list, update, delete) - An employer can only access their own job posts.
     * @deny (create, get, list, update, delete) - An employer cannot access another employer's job posts.
     * @principle Restricts access to a user's own data tree.
     */
    match /employers/{employerId}/jobPosts/{jobPostId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(employerId) {
        return request.auth.uid == employerId;
      }

      function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }
      allow get: if isOwner(employerId);
      allow list: if isOwner(employerId);
      allow create: if isSignedIn() && isOwner(employerId);
      allow update: if isExistingOwner(employerId);
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Controls access to job applications for a specific job post and employer. Only the employer can read/write applications to their own job posts.
     * @path /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}
     * @allow (create) - An employer can manage applications to their job post.
     * @allow (get, list, update, delete) - An employer can only access applications for their own job posts.
     * @deny (create, get, list, update, delete) - An employer cannot access applications for another employer's job posts.
     * @principle Restricts access to a user's own data tree.
     */
    match /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(employerId) {
        return request.auth.uid == employerId;
      }

      function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }
      allow get: if isOwner(employerId);
      allow list: if isOwner(employerId);
      allow create: if isSignedIn() && isOwner(employerId);
      allow update: if isExistingOwner(employerId);
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Controls access to all job posts.  Allows public read access, but restricts writes to authenticated users.
     * @path /jobPosts/{jobPostId}
     * @allow (get, list) - Anyone can view job posts.
     * @allow (create) - Only authenticated users can create job posts, and the employerId field must match their UID.
     * @allow (update, delete) - Only the creator of the job post can update or delete it.
     * @deny (create, update, delete) - Non-authenticated users cannot create, update, or delete job posts.
     * @principle Allows public read access with owner-only writes.
     */
    match /jobPosts/{jobPostId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to blog posts. Allows public read access, but restricts writes to authenticated users.
     * @path /blogs/{blogId}
     * @allow (get, list) - Anyone can view blog posts.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete blog posts.
     * @deny (create, update, delete) - Non-authenticated users cannot create, update, or delete blog posts.
     * @principle Allows public read access.
     */
    match /blogs/{blogId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to company reviews.
     * @path /companyReviews/{companyReviewId}
     */
    match /companyReviews/{companyReviewId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}