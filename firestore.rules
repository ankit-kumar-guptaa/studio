/**
 * @file Firestore Security Rules for Hiring Dekho
 * @corePhilosophy This ruleset enforces a strict user-ownership model for user profiles and associated data (saved jobs, applications),
 * allows employers to manage their own job posts, and provides public read access to job posts and blogs.
 * @dataStructure The database is structured with separate collections for job seekers, employers, job posts, blogs, and company reviews. User-specific data is nested under the respective user ID.
 * @keySecurityDecisions
 * - Users can only access their own profiles and related data.
 * - Employers can only manage their own job posts.
 * - Job posts and blogs are publicly readable.
 * - Denormalization: Job posts are copied into the `jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}` collection to avoid complex queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to job seeker profiles.
     * @path /jobSeekers/{jobSeekerId}
     * @allow (get, list): Authenticated user can read their own profile.
     * @allow (create): Authenticated user can create their own profile.
     * @allow (update, delete): Authenticated user can update or delete their own profile.
     * @deny (get, list): Authenticated user cannot read other profiles.
     * @deny (create, update, delete): Authenticated user cannot create, update, or delete other profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /jobSeekers/{jobSeekerId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(jobSeekerId);
      allow list: if false;
      allow create: if isOwner(jobSeekerId);
      allow update: if isExistingOwner(jobSeekerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(jobSeekerId);
    }

     /**
      * @description Grants access to jobs saved by a job seeker.
      * @path /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}
      * @allow (get, list): Authenticated user can read their own saved jobs.
      * @allow (create): Authenticated user can create their own saved jobs.
      * @allow (update, delete): Authenticated user can update or delete their own saved jobs.
      * @deny (get, list): Authenticated user cannot read other user's saved jobs.
      * @deny (create, update, delete): Authenticated user cannot create, update, or delete other user's saved jobs.
      * @principle Enforces document ownership for saved jobs.
      */
    match /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(jobSeekerId);
      allow list: if isOwner(jobSeekerId);
      allow create: if isOwner(jobSeekerId);
      allow update: if isExistingOwner(jobSeekerId);
      allow delete: if isExistingOwner(jobSeekerId);
    }

    /**
     * @description Grants access to job applications made by a job seeker.
     * @path /jobSeekers/{jobSeekerId}/applications/{applicationId}
     * @allow (get, list): Authenticated user can read their own job applications.
     * @allow (create): Authenticated user can create their own job applications.
     * @allow (update, delete): Authenticated user can update or delete their own job applications.
     * @deny (get, list): Authenticated user cannot read other user's job applications.
     * @deny (create, update, delete): Authenticated user cannot create, update, or delete other user's job applications.
     * @principle Enforces document ownership for job applications.
     */
    match /jobSeekers/{jobSeekerId}/applications/{applicationId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(jobSeekerId);
      allow list: if isOwner(jobSeekerId);
      allow create: if isOwner(jobSeekerId);
      allow update: if isExistingOwner(jobSeekerId);
      allow delete: if isExistingOwner(jobSeekerId);
    }

    /**
     * @description Grants access to employer profiles.
     * @path /employers/{employerId}
     * @allow (get, list): Authenticated user can read their own profile.
     * @allow (create): Authenticated user can create their own profile.
     * @allow (update, delete): Authenticated user can update or delete their own profile.
     * @deny (get, list): Authenticated user cannot read other profiles.
     * @deny (create, update, delete): Authenticated user cannot create, update, or delete other profiles.
     * @principle Enforces document ownership for employer profiles.
     */
    match /employers/{employerId} {
      function isOwner(employerId) {
        return request.auth != null && request.auth.uid == employerId;
      }
       function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }
      allow get: if isOwner(employerId);
      allow list: if false;
      allow create: if isOwner(employerId);
      allow update: if isExistingOwner(employerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Grants access to job posts associated with an employer.
     * @path /employers/{employerId}/jobPosts/{jobPostId}
     * @allow (get, list): Authenticated employer can read their own job posts.
     * @allow (create): Authenticated employer can create their own job posts.
     * @allow (update, delete): Authenticated employer can update or delete their own job posts.
     * @deny (get, list): Authenticated employer cannot read other employer's job posts.
     * @deny (create, update, delete): Authenticated employer cannot create, update, or delete other employer's job posts.
     * @principle Enforces document ownership for job posts.
     */
    match /employers/{employerId}/jobPosts/{jobPostId} {
      function isOwner(employerId) {
        return request.auth != null && request.auth.uid == employerId;
      }
      function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }
      allow get: if isOwner(employerId);
      allow list: if isOwner(employerId);
      allow create: if isOwner(employerId);
      allow update: if isExistingOwner(employerId) && request.resource.data.employerId == resource.data.employerId;
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Grants access to job applications for a specific job post.
     * @path /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}
     * @allow (get, list): Authenticated employer can read job applications for their job posts.
     * @allow (create): Authenticated employer can create job applications for their job posts.
     * @allow (update, delete): Authenticated employer can update or delete job applications for their job posts.
     * @deny (get, list): Authenticated employer cannot read job applications for other employer's job posts.
     * @deny (create, update, delete): Authenticated employer cannot create, update, or delete job applications for other employer's job posts.
     * @principle Enforces document ownership for job applications within job posts.
     */
    match /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId} {
       function isOwner(employerId) {
        return request.auth != null && request.auth.uid == employerId;
      }
      function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }
      allow get: if isOwner(employerId);
      allow list: if isOwner(employerId);
      allow create: if isOwner(employerId);
      allow update: if isExistingOwner(employerId);
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Grants public read access to job posts.
     * @path /jobPosts/{jobPostId}
     * @allow (get, list): Anyone can read job posts.
     * @allow (create): Authenticated user can create a job post with matching employerId.
     * @allow (update, delete): Authenticated user can update or delete their own job posts, matching employerId.
     * @deny (create, update, delete): Unauthenticated users cannot create, update, or delete job posts.
     * @principle Allows public read access with owner-only writes.
     */
    match /jobPosts/{jobPostId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.employerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.employerId == request.auth.uid;
    }

    /**
     * @description Grants public read access to blog posts.
     * @path /blogs/{blogId}
     * @allow (get, list): Anyone can read blog posts.
     * @allow (create, update, delete): No one can create, update or delete blog posts.
     * @principle Allows public read access to blog posts.
     */
    match /blogs/{blogId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to company reviews.
     * @path /companyReviews/{companyReviewId}
     * @allow (get, list): Anyone can read company reviews.
     * @allow (create): Authenticated user can create a company review.
     * @allow (update, delete): No one can update or delete company reviews.
     * @principle Allows public read access to company reviews.
     */
    match /companyReviews/{companyReviewId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}