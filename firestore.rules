rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to job seeker profiles. Only the job seeker can read/write their own profile.
     * @path /jobSeekers/{jobSeekerId}
     * @allow (create) - A job seeker can create their profile if the auth.uid matches the jobSeekerId.
     * @allow (get,update,delete) - A job seeker can access their profile if they are the owner (auth.uid matches the jobSeekerId).
     * @deny (create) - A job seeker cannot create a profile with an ID that doesn't match their auth.uid.
     * @deny (update,delete) - A job seeker cannot modify/delete someone else's profile.
     * @principle Enforces document ownership for writes.
     */
    match /jobSeekers/{jobSeekerId} {
      function isOwner(jobSeekerId) {
        return request.auth != null && request.auth.uid == jobSeekerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(jobSeekerId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(jobSeekerId);
      allow update: if isOwner(jobSeekerId);
      allow delete: if isOwner(jobSeekerId);
    }

    /**
     * @description Manages access to saved jobs for a job seeker. Only the job seeker can read/write their saved jobs.
     * @path /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}
     * @allow (create) - A job seeker can save a job.
     * @allow (get,update,delete) - A job seeker can access/modify/delete their saved jobs.
     * @deny (create) - A job seeker cannot save a job under someone else's profile.
     * @deny (update,delete) - A job seeker cannot modify/delete someone else's saved jobs.
     * @principle Restricts access to a user's own data tree.
     */
    match /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId} {
      function isOwner(jobSeekerId) {
        return request.auth != null && request.auth.uid == jobSeekerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(jobSeekerId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(jobSeekerId);
      allow update: if isOwner(jobSeekerId);
      allow delete: if isOwner(jobSeekerId);
    }

       /**
        * @description Manages access to job applications for a specific job seeker.
        * @path /jobSeekers/{jobSeekerId}/applications/{applicationId}
        * @allow (create) - A job seeker can create their own job applications.
        * @allow (get,update,delete) - A job seeker can access/modify/delete their own job applications.
        * @deny (create) - A job seeker cannot create job applications for someone else.
        * @deny (update,delete) - A job seeker cannot modify/delete someone else's job applications.
        * @principle Restricts access to a user's own data tree.
        */
    match /jobSeekers/{jobSeekerId}/applications/{applicationId} {
      function isOwner(jobSeekerId) {
        return request.auth != null && request.auth.uid == jobSeekerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(jobSeekerId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(jobSeekerId);
      allow update: if isOwner(jobSeekerId);
      allow delete: if isOwner(jobSeekerId);
    }

    /**
     * @description Manages access to employer profiles. Only the employer can read/write their own profile.
     * @path /employers/{employerId}
     * @allow (create) - An employer can create their profile if the auth.uid matches the employerId.
     * @allow (get,update,delete) - An employer can access their profile if they are the owner (auth.uid matches the employerId).
     * @deny (create) - An employer cannot create a profile with an ID that doesn't match their auth.uid.
     * @deny (update,delete) - An employer cannot modify/delete someone else's profile.
     * @principle Enforces document ownership for writes.
     */
    match /employers/{employerId} {
      function isOwner(employerId) {
        return request.auth != null && request.auth.uid == employerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(employerId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(employerId);
      allow update: if isOwner(employerId);
      allow delete: if isOwner(employerId);
    }

    /**
     * @description Manages access to job posts created by an employer. Only the employer can read/write their own job posts.
     * @path /employers/{employerId}/jobPosts/{jobPostId}
     * @allow (create) - An employer can create a job post.
     * @allow (get,update,delete) - An employer can access/modify/delete their own job posts.
     * @deny (create) - An employer cannot create a job post under someone else's profile.
     * @deny (update,delete) - An employer cannot modify/delete someone else's job posts.
     * @principle Restricts access to a user's own data tree.
     */
    match /employers/{employerId}/jobPosts/{jobPostId} {
      function isOwner(employerId) {
        return request.auth != null && request.auth.uid == employerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(employerId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(employerId);
      allow update: if isOwner(employerId);
      allow delete: if isOwner(employerId);
    }

     /**
      * @description Manages access to job applications for a specific job post, accessible only by the owning employer.
      * @path /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}
      * @allow (get,list,create,update,delete) - Only the owning employer can manage applications for their job posts.
      * @deny (get,list,create,update,delete) - No one else can manage these applications.
      * @principle Restricts access to employer's own job post applications.
      */
    match /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId} {
        function isOwner(employerId) {
            return request.auth != null && request.auth.uid == employerId;
        }
        allow get: if isOwner(employerId);
        allow list: if false;
        allow create: if false; // Only backend can create.
        allow update: if isOwner(employerId);
        allow delete: if isOwner(employerId);
    }

    /**
     * @description Manages access to centralized job posts.  Public read, owner-only write (via employer).
     * @path /jobPosts/{jobPostId}
     * @allow (get,list) - Anyone can read/list job posts.
     * @deny (create,update,delete) - No direct creation, updates or deletes via this path.  Use the employer path.
     * @principle Public read with owner-only writes.
     */
    match /jobPosts/{jobPostId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to blog posts. Public read, no write access.
     * @path /blogs/{blogId}
     * @allow (get,list) - Anyone can read/list blog posts.
     * @deny (create,update,delete) - Blog posts are not writable via the client.
     * @principle Public read.
     */
    match /blogs/{blogId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to company reviews. Public read, any signed in user can create a review.
     * @path /companyReviews/{companyReviewId}
     * @allow (get,list) - Anyone can read/list company reviews.
     * @allow (create) - Any signed-in user can create a company review.
     * @deny (update,delete) - Reviews can not be updated or deleted.
     * @principle Public read, authenticated create.
     */
    match /companyReviews/{companyReviewId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}