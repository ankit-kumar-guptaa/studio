/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a strict user-ownership model for job seekers and employers,
 *  allowing them to manage their own profiles, job postings, and applications.
 *  Public read access is granted to employer profiles and job posts to facilitate discovery.
 *  Reviews are also public but are restricted on create to signed-in users only.
 * @data_structure
 *  - /jobSeekers/{jobSeekerId}: Job seeker profiles, only accessible by the job seeker themselves.
 *  - /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}: Jobs saved by a job seeker, only accessible by the job seeker. The document is a copy of the original job post.
 *  - /employers/{employerId}: Employer profiles, publicly readable, but only editable by the employer.
 *  - /employers/{employerId}/jobPosts/{jobPostId}: Job postings, publicly readable, but only editable by the employer.
 *  - /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}: Job applications, only accessible by the employer who created the job post.
 *  - /blogs/{blogId}: Blog posts, publicly readable and writable (for prototyping).
 *  - /companyReviews/{companyReviewId}: Company reviews, publicly readable, creation by signed-in users only.
 * @key_security_decisions
 *  - User listing is disallowed.
 *  - Public read access for employer profiles and job posts.
 *  - Strict ownership for job seeker profiles and saved jobs.
 *  - Open access to blogs for prototyping, which should be restricted later.
 * @denormalization_for_authorization N/A
 * @structural_segregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to job seeker profiles. Only the authenticated user can read or write their own profile.
     * @path /jobSeekers/{jobSeekerId}
     * @allow (create, update, get, list) if request.auth.uid == jobSeekerId
     * @deny (create) if request.auth.uid != jobSeekerId
     * @deny (update) if request.auth.uid != jobSeekerId
     * @principle Enforces document ownership for all operations.
     */
    match /jobSeekers/{jobSeekerId} {
      // Verified Identity: JobSeekers can only access their own profile.
      allow get, update, delete: if isOwner(jobSeekerId);
      allow create: if isOwner(jobSeekerId);
      allow list: if false;
    }

    /**
     * @description Controls access to saved jobs for a specific job seeker. Only the job seeker can manage their saved jobs.
     * @path /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}
     * @allow (create, update, get, list) if request.auth.uid == jobSeekerId
     * @deny (create) if request.auth.uid != jobSeekerId
     * @deny (update) if request.auth.uid != jobSeekerId
     * @principle Enforces document ownership for all operations.
     */
    match /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId} {
      // Ownership: JobSeekers can only access their own saved jobs.
      allow get, update, delete, list: if isOwner(jobSeekerId);
      allow create: if isOwner(jobSeekerId);
    }

    /**
     * @description Controls access to employer profiles. Employer profiles are publicly readable, but only the employer can update or delete their own profile.
     * @path /employers/{employerId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if request.auth.uid == employerId
     * @deny (create) if request.auth.uid != employerId
     * @deny (update) if request.auth.uid != employerId
     * @principle Allows public reads but enforces ownership for writes.
     */
    match /employers/{employerId} {
      // Public Read with Owner-Only Writes: Employer profiles.
      allow get, list: if true;
      allow update, delete: if isOwner(employerId);
      allow create: if isOwner(employerId);
    }

    /**
     * @description Controls access to job postings for a specific employer. Job postings are publicly readable, but only the employer can create, update, or delete them.
     * @path /employers/{employerId}/jobPosts/{jobPostId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if request.auth.uid == employerId
     * @deny (create) if request.auth.uid != employerId
     * @deny (update) if request.auth.uid != employerId
     * @principle Allows public reads but enforces ownership for writes.
     */
    match /employers/{employerId}/jobPosts/{jobPostId} {
      // Public Read with Owner-Only Writes: Job posts.
      allow get, list: if true;
      allow update, delete: if isOwner(employerId);
      allow create: if isOwner(employerId);
    }

   /**
     * @description Controls access to job applications for a specific job posting. Only the employer who created the job post can access the applications.
     * @path /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}
     * @allow (get, list, create, update, delete) if request.auth.uid == employerId
     * @deny (create) if request.auth.uid != employerId
     * @deny (update) if request.auth.uid != employerId
     * @principle Enforces ownership: only the employer who created the job post can manage applications.
     */
    match /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId} {
      // Ownership: Employers can only access applications for their own job posts.
      allow get, update, delete, list: if isOwner(employerId);
      allow create: if isOwner(employerId);
    }

    /**
     * @description Controls access to blog posts.  This is open for prototyping.
     * @path /blogs/{blogId}
     * @allow (get, list, create, update, delete) if true
     * @principle Open access for prototyping.  This should be restricted later.
     */
    match /blogs/{blogId} {
      // Public Read/Write: Blog posts (for prototyping - restrict later).
      allow get, list, create, update, delete: if true;
    }

    /**
     * @description Controls access to company reviews. Company reviews are publicly readable, but only signed-in users can create them.
     * @path /companyReviews/{companyReviewId}
     * @allow (get, list) if true
     * @allow (create) if request.auth != null
     * @deny (create) if request.auth == null
     * @principle Allows public reads, restricts creation to signed-in users.
     */
    match /companyReviews/{companyReviewId} {
      // Public Read, Signed-In User Create: Company reviews.
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }
}