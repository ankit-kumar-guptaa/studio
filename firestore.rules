/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and associated data,
 *              while allowing public read access to job posts. It prioritizes data consistency and prevents unauthorized data modification.
 *
 * Data Structure:
 * - /jobSeekers/{jobSeekerId}: User profiles, accessible only by the user themselves.
 * - /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}: Jobs saved by a user, accessible only by the user.
 * - /jobSeekers/{jobSeekerId}/applications/{applicationId}: Applications made by a user, accessible only by the user.
 * - /employers/{employerId}: Employer profiles, accessible only by the employer themselves.
 * - /employers/{employerId}/jobPosts/{jobPostId}: Job posts created by an employer, accessible only by the employer.
 * - /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}: Applications to a specific job post, accessible only by the employer.
 * - /jobPosts/{jobPostId}: Public collection of all job posts, read-only for all.
 * - /blogs/{blogId}: Public collection of blog posts, read-only for all.
 * - /companyReviews/{companyReviewId}: Company reviews, create-only for authenticated users.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Job posts are publicly readable to maximize visibility but can only be created/updated/deleted by authenticated employers.
 * - The `id` field within user and employer documents is strictly enforced to match the `auth.uid` for ownership.
 * - Write operations are protected against modification of the `id` field after creation to maintain relational integrity.
 *
 * Denormalization for Authorization:
 * - Job posts denormalize `employerId` to allow for efficient owner-based security rules.
 *
 * Structural Segregation:
 * - Private user data (profiles, saved jobs, applications) is stored under the `/users/{userId}` path,
 *   while public job posts are stored in the top-level `/jobPosts` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to job seeker profiles.
     * @path /jobSeekers/{jobSeekerId}
     * @allow (create) - Authenticated user can create their own profile if the jobSeekerId matches their UID.
     * @allow (get, list, update, delete) - Authenticated user can read, update, and delete their own profile if the jobSeekerId matches their UID and document exists.
     * @deny (create, update, delete) - If the jobSeekerId does not match the authenticated user's UID.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /jobSeekers/{jobSeekerId} {
      //jobSeekerId is same as uid
      allow get: if isSignedIn() && isOwner(jobSeekerId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(jobSeekerId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(jobSeekerId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(jobSeekerId);
    }

    /**
     * @description Grants access to jobs saved by a job seeker.
     * @path /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage their own saved jobs if the jobSeekerId matches their UID.
     * @deny (create, get, list, update, delete) - If the jobSeekerId does not match the authenticated user's UID.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId} {
      allow get: if isSignedIn() && isOwner(jobSeekerId);
      allow list: if isSignedIn() && isOwner(jobSeekerId);
      allow create: if isSignedIn() && isOwner(jobSeekerId);
      allow update: if isSignedIn() && isOwner(jobSeekerId);
      allow delete: if isSignedIn() && isOwner(jobSeekerId);
    }

    /**
     * @description Grants access to applications made by a job seeker.
     * @path /jobSeekers/{jobSeekerId}/applications/{applicationId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage their own applications if the jobSeekerId matches their UID.
     * @deny (create, get, list, update, delete) - If the jobSeekerId does not match the authenticated user's UID.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /jobSeekers/{jobSeekerId}/applications/{applicationId} {
      allow get: if isSignedIn() && isOwner(jobSeekerId);
      allow list: if isSignedIn() && isOwner(jobSeekerId);
      allow create: if isSignedIn() && isOwner(jobSeekerId);
      allow update: if isSignedIn() && isOwner(jobSeekerId);
      allow delete: if isSignedIn() && isOwner(jobSeekerId);
    }

    /**
     * @description Grants access to employer profiles.
     * @path /employers/{employerId}
     * @allow (create) - Authenticated user can create their own profile if the employerId matches their UID.
     * @allow (get, list, update, delete) - Authenticated user can read, update, and delete their own profile if the employerId matches their UID and document exists.
     * @deny (create, update, delete) - If the employerId does not match the authenticated user's UID.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /employers/{employerId} {
      allow get: if isSignedIn() && isOwner(employerId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(employerId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(employerId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(employerId);
    }

    /**
     * @description Grants access to job posts created by an employer.
     * @path /employers/{employerId}/jobPosts/{jobPostId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage their own job posts if the employerId matches their UID.
     * @deny (create, get, list, update, delete) - If the employerId does not match the authenticated user's UID.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /employers/{employerId}/jobPosts/{jobPostId} {
      allow get: if isSignedIn() && isOwner(employerId);
      allow list: if isSignedIn() && isOwner(employerId);
      allow create: if isSignedIn() && isOwner(employerId);
      allow update: if isSignedIn() && isExistingOwner(employerId);
      allow delete: if isSignedIn() && isExistingOwner(employerId);
    }

       /**
        * @description Grants access to job applications for a specific job post by an employer.
        * @path /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}
        * @allow (create, get, list, update, delete) - Authenticated employer can manage applications for their job posts.
        * @deny (create, get, list, update, delete) - If the employerId does not match the authenticated user's UID.
        * @principle Enforces document ownership for writes, restricts access to the owning employer.
        */
    match /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId} {
        allow get: if isSignedIn() && isOwner(employerId);
        allow list: if isSignedIn() && isOwner(employerId);
        allow create: if isSignedIn() && isOwner(employerId);
        allow update: if isSignedIn() && isExistingOwner(employerId);
        allow delete: if isSignedIn() && isExistingOwner(employerId);
    }

    /**
     * @description Grants public read access to job posts, with owner-only writes.
     * @path /jobPosts/{jobPostId}
     * @allow (get, list) - Anyone can read job posts.
     * @allow (create) - Authenticated users can create job posts if the employerId matches their UID.
     * @allow (update, delete) - Only the owner (employer who created the post) can update or delete the job post, and the document must exist.
     * @deny (create) - If the employerId does not match the authenticated user's UID.
     * @principle Allows public read access while enforcing document ownership for writes.
     */
    match /jobPosts/{jobPostId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.employerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Grants public read access to blog posts.
     * @path /blogs/{blogId}
     * @allow (get, list) - Anyone can read blog posts.
     * @deny (create, update, delete) - No one can create, update or delete blog posts.
     * @principle Allows public read access.
     */
    match /blogs/{blogId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants access to company reviews. Anyone can create a review, but only authenticated users can create.
     * @path /companyReviews/{companyReviewId}
     * @allow (create) - Authenticated users can create company reviews.
     * @deny (get, list, update, delete) - No one can read, update or delete company reviews.
     * @principle Allows authenticated users to create reviews.
     */
    match /companyReviews/{companyReviewId} {
      allow create: if isSignedIn();
      allow get, list, update, delete: if false;
    }


    // ===== Helper Functions =====

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}