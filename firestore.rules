/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for job seekers and employers,
 *              allowing them to manage their own profiles, job postings, saved jobs, and applications.
 *              It also provides public read access to job posts and blogs while restricting write access
 *              to authorized users. Company reviews can be created by job seekers and are publicly readable.
 *
 * @dataStructure
 *  - /jobSeekers/{jobSeekerId}: Stores job seeker profiles.
 *  - /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}: Stores jobs saved by a job seeker.
 *  - /jobSeekers/{jobSeekerId}/applications/{applicationId}: Stores a record of applications made by a job seeker.
 *  - /employers/{employerId}: Stores employer profiles.
 *  - /employers/{employerId}/jobPosts/{jobPostId}: Stores job postings associated with an employer.
 *  - /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}: Stores job applications for a specific job post.
 *  - /jobPosts/{jobPostId}: Centralized, read-only collection of all job posts.
 *  - /blogs/{blogId}: Stores blog posts.
 *  - /companyReviews/{companyReviewId}: Stores company reviews.
 *
 * @keySecurityDecisions
 *  - User listing is disallowed.
 *  - Job posts are publicly readable but owner-writable (employer).
 *  - Saved Jobs and Applications are nested under the user and only accessible to the user.
 *
 * @denormalizationForAuthorization
 *  - Job posts denormalize `employerId` to enforce ownership.
 *  - Company reviews denormalize `jobSeekerId` and `employerId` to enforce ownership and relationships.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces owner-only access to job seeker profiles.
     * @path /jobSeekers/{jobSeekerId}
     * @allow (create) Signed-in user can create their own profile.
     * @allow (get, list, update, delete) Signed-in user can only access their own profile data.
     * @deny (create) Signed-in user cannot create a profile with a different ID.
     * @deny (get, list, update, delete) Signed-in user cannot access other user's profile data.
     * @principle Enforces document ownership for all operations.
     */
    match /jobSeekers/{jobSeekerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(jobSeekerId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(jobSeekerId) && request.resource.data.id == jobSeekerId;
      allow update: if isExistingOwner(jobSeekerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(jobSeekerId);
    }

    /**
     * @description Enforces owner-only access to saved jobs for a specific job seeker.
     *              The jobSeekerId path parameter must match the authenticated user's ID.
     * @path /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId}
     * @allow (create) Signed-in user can save a job under their profile.
     * @allow (get, list, update, delete) Signed-in user can only access saved jobs under their own profile.
     * @deny (create) Signed-in user cannot save a job under another user's profile.
     * @deny (get, list, update, delete) Signed-in user cannot access saved jobs under other user's profiles.
     * @principle Enforces document ownership for all operations.
     */
    match /jobSeekers/{jobSeekerId}/savedJobs/{jobPostId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(jobSeekerId);
      allow list: if isOwner(jobSeekerId);
      allow create: if isSignedIn() && isOwner(jobSeekerId);
      allow update: if isExistingOwner(jobSeekerId);
      allow delete: if isExistingOwner(jobSeekerId);
    }

     /**
     * @description Enforces owner-only access to applications for a specific job seeker.
     *              The jobSeekerId path parameter must match the authenticated user's ID.
     * @path /jobSeekers/{jobSeekerId}/applications/{applicationId}
     * @allow (create) Signed-in user can create an application under their profile.
     * @allow (get, list, update, delete) Signed-in user can only access applications under their own profile.
     * @deny (create) Signed-in user cannot create an application under another user's profile.
     * @deny (get, list, update, delete) Signed-in user cannot access applications under other user's profiles.
     * @principle Enforces document ownership for all operations.
     */
    match /jobSeekers/{jobSeekerId}/applications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(jobSeekerId);
      allow list: if isOwner(jobSeekerId);
      allow create: if isSignedIn() && isOwner(jobSeekerId);
      allow update: if isExistingOwner(jobSeekerId);
      allow delete: if isExistingOwner(jobSeekerId);
    }


    /**
     * @description Enforces owner-only access to employer profiles.
     * @path /employers/{employerId}
     * @allow (create) Signed-in user can create their own profile.
     * @allow (get, list, update, delete) Signed-in user can only access their own profile data.
     * @deny (create) Signed-in user cannot create a profile with a different ID.
     * @deny (get, list, update, delete) Signed-in user cannot access other user's profile data.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{employerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(employerId) {
        return request.auth.uid == employerId;
      }

       function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }

      allow get: if isOwner(employerId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(employerId) && request.resource.data.id == employerId;
      allow update: if isExistingOwner(employerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Enforces owner-only access to job posts under a specific employer.
     *              The employerId path parameter must match the authenticated user's ID.
     * @path /employers/{employerId}/jobPosts/{jobPostId}
     * @allow (create) Signed-in user can create a job post under their employer profile.
     * @allow (get, list, update, delete) Signed-in user can only access job posts under their own employer profile.
     * @deny (create) Signed-in user cannot create a job post under another employer's profile.
     * @deny (get, list, update, delete) Signed-in user cannot access job posts under other employer's profiles.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{employerId}/jobPosts/{jobPostId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(employerId) {
        return request.auth.uid == employerId;
      }

       function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }

      allow get: if isOwner(employerId);
      allow list: if isOwner(employerId);
      allow create: if isSignedIn() && isOwner(employerId) && request.resource.data.employerId == employerId;
      allow update: if isExistingOwner(employerId) && request.resource.data.employerId == resource.data.employerId;
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Enforces owner-only access to job applications under a specific job post and employer.
     *              The employerId path parameter must match the authenticated user's ID.
     * @path /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId}
     * @allow (create) Signed-in user can create a job application under their employer profile's job post.
     * @allow (get, list, update, delete) Signed-in user can only access job applications under their own employer profile's job post.
     * @deny (create) Signed-in user cannot create a job application under another employer's profile or job post.
     * @deny (get, list, update, delete) Signed-in user cannot access job applications under other employer's profiles or job posts.
     * @principle Enforces document ownership for all operations.
     */
    match /employers/{employerId}/jobPosts/{jobPostId}/applications/{applicationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(employerId) {
        return request.auth.uid == employerId;
      }

       function isExistingOwner(employerId) {
        return isOwner(employerId) && resource != null;
      }

      allow get: if isOwner(employerId);
      allow list: if isOwner(employerId);
      allow create: if isSignedIn() && isOwner(employerId);
      allow update: if isExistingOwner(employerId);
      allow delete: if isExistingOwner(employerId);
    }

    /**
     * @description Allows public read access to all job posts, but restricts write access to owners (employers).
     *              The rule checks if the authenticated user is the owner of the job post by comparing their UID with the employerId field in the document.
     * @path /jobPosts/{jobPostId}
     * @allow (get, list) Any user can read job posts.
     * @allow (create) Signed-in user can create a job post if they are the owner.
     * @allow (update, delete) Signed-in user can only update/delete job posts they own.
     * @deny (create) Signed-in user cannot create a job post if they are not the owner.
     * @deny (update, delete) Signed-in user cannot update/delete job posts they do not own.
     * @principle Allows public read access with owner-only writes.
     */
    match /jobPosts/{jobPostId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(employerId) {
            return request.auth.uid == employerId;
        }

        function isExistingOwner(employerId) {
            return isOwner(employerId) && resource != null;
        }

        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() && request.resource.data.employerId == request.auth.uid;
        allow update: if isExistingOwner(resource.data.employerId) && request.resource.data.employerId == resource.data.employerId;
        allow delete: if isExistingOwner(resource.data.employerId);
    }

    /**
     * @description Allows public read access to all blog posts.
     * @path /blogs/{blogId}
     * @allow (get, list) Any user can read blog posts.
     * @deny (create, update, delete) No one can write blog posts (for now).
     * @principle Allows public read access.
     */
    match /blogs/{blogId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows any signed-in user to create a company review, and allows public read access.
     *              The rule checks that a signed-in user creates a company review with their `jobSeekerId`
     * @path /companyReviews/{companyReviewId}
     * @allow (get, list) Any user can read company reviews.
     * @allow (create) Any signed-in user can create a company review.
     * @deny (update, delete) No one can update or delete company reviews (for now).
     * @principle Allows public read access and authenticated user creation.
     */
    match /companyReviews/{companyReviewId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
    }

      /**
     * @description Allows public read access to employers collection.
     * @path /employers
     * @allow (get, list) Any user can read employers.
     * @deny (create, update, delete) No one can write employers (covered by /employers/{employerId}).
     * @principle Allows public read access.
     */
    match /employers {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}